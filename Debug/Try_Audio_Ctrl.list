
Try_Audio_Ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de8  08007de8  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df0  08007df0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  20000040  08007e38  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  08007e38  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcc2  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000330c  00000000  00000000  0003dd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  00041040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001740  00000000  00000000  00042920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299ed  00000000  00000000  00044060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013bbb  00000000  00000000  0006da4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010d9ee  00000000  00000000  00081608  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0018eff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  0018f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00195afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007584 	.word	0x08007584

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08007584 	.word	0x08007584

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80004d6:	2110      	movs	r1, #16
 80004d8:	20d4      	movs	r0, #212	; 0xd4
 80004da:	f000 ff03 	bl	80012e4 <SENSOR_IO_Read>
 80004de:	4603      	mov	r3, r0
 80004e0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80004ee:	7bba      	ldrb	r2, [r7, #14]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2110      	movs	r1, #16
 80004fc:	20d4      	movs	r0, #212	; 0xd4
 80004fe:	f000 fed7 	bl	80012b0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000502:	2112      	movs	r1, #18
 8000504:	20d4      	movs	r0, #212	; 0xd4
 8000506:	f000 feed 	bl	80012e4 <SENSOR_IO_Read>
 800050a:	4603      	mov	r3, r0
 800050c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800051c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800051e:	7bba      	ldrb	r2, [r7, #14]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	4313      	orrs	r3, r2
 8000524:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	461a      	mov	r2, r3
 800052a:	2112      	movs	r1, #18
 800052c:	20d4      	movs	r0, #212	; 0xd4
 800052e:	f000 febf 	bl	80012b0 <SENSOR_IO_Write>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000544:	2110      	movs	r1, #16
 8000546:	20d4      	movs	r0, #212	; 0xd4
 8000548:	f000 fecc 	bl	80012e4 <SENSOR_IO_Read>
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	461a      	mov	r2, r3
 800055c:	2110      	movs	r1, #16
 800055e:	20d4      	movs	r0, #212	; 0xd4
 8000560:	f000 fea6 	bl	80012b0 <SENSOR_IO_Write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000570:	f000 fe94 	bl	800129c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000574:	210f      	movs	r1, #15
 8000576:	20d4      	movs	r0, #212	; 0xd4
 8000578:	f000 feb4 	bl	80012e4 <SENSOR_IO_Read>
 800057c:	4603      	mov	r3, r0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}

08000582 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000590:	2115      	movs	r1, #21
 8000592:	20d4      	movs	r0, #212	; 0xd4
 8000594:	f000 fea6 	bl	80012e4 <SENSOR_IO_Read>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2115      	movs	r1, #21
 80005b8:	20d4      	movs	r0, #212	; 0xd4
 80005ba:	f000 fe79 	bl	80012b0 <SENSOR_IO_Write>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80005de:	2110      	movs	r1, #16
 80005e0:	20d4      	movs	r0, #212	; 0xd4
 80005e2:	f000 fe7f 	bl	80012e4 <SENSOR_IO_Read>
 80005e6:	4603      	mov	r3, r0
 80005e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	2306      	movs	r3, #6
 80005f0:	2128      	movs	r1, #40	; 0x28
 80005f2:	20d4      	movs	r0, #212	; 0xd4
 80005f4:	f000 fe94 	bl	8001320 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	77fb      	strb	r3, [r7, #31]
 80005fc:	e01f      	b.n	800063e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	3301      	adds	r3, #1
 8000604:	f107 0220 	add.w	r2, r7, #32
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800060e:	b29b      	uxth	r3, r3
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b29a      	uxth	r2, r3
 8000614:	7ffb      	ldrb	r3, [r7, #31]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	f107 0120 	add.w	r1, r7, #32
 800061c:	440b      	add	r3, r1
 800061e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000622:	b29b      	uxth	r3, r3
 8000624:	4413      	add	r3, r2
 8000626:	b29a      	uxth	r2, r3
 8000628:	7ffb      	ldrb	r3, [r7, #31]
 800062a:	b212      	sxth	r2, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	f107 0120 	add.w	r1, r7, #32
 8000632:	440b      	add	r3, r1
 8000634:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000638:	7ffb      	ldrb	r3, [r7, #31]
 800063a:	3301      	adds	r3, #1
 800063c:	77fb      	strb	r3, [r7, #31]
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d9dc      	bls.n	80005fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	f003 030c 	and.w	r3, r3, #12
 800064a:	2b0c      	cmp	r3, #12
 800064c:	d828      	bhi.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <LSM6DSL_AccReadXYZ+0x8c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000689 	.word	0x08000689
 8000658:	080006a1 	.word	0x080006a1
 800065c:	080006a1 	.word	0x080006a1
 8000660:	080006a1 	.word	0x080006a1
 8000664:	0800069b 	.word	0x0800069b
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006a1 	.word	0x080006a1
 8000670:	080006a1 	.word	0x080006a1
 8000674:	0800068f 	.word	0x0800068f
 8000678:	080006a1 	.word	0x080006a1
 800067c:	080006a1 	.word	0x080006a1
 8000680:	080006a1 	.word	0x080006a1
 8000684:	08000695 	.word	0x08000695
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <LSM6DSL_AccReadXYZ+0x124>)
 800068a:	61bb      	str	r3, [r7, #24]
    break;
 800068c:	e008      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <LSM6DSL_AccReadXYZ+0x128>)
 8000690:	61bb      	str	r3, [r7, #24]
    break;
 8000692:	e005      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <LSM6DSL_AccReadXYZ+0x12c>)
 8000696:	61bb      	str	r3, [r7, #24]
    break;
 8000698:	e002      	b.n	80006a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <LSM6DSL_AccReadXYZ+0x130>)
 800069c:	61bb      	str	r3, [r7, #24]
    break;    
 800069e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	77fb      	strb	r3, [r7, #31]
 80006a4:	e01b      	b.n	80006de <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	f107 0220 	add.w	r2, r7, #32
 80006ae:	4413      	add	r3, r2
 80006b0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d0:	ee17 2a90 	vmov	r2, s15
 80006d4:	b212      	sxth	r2, r2
 80006d6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	3301      	adds	r3, #1
 80006dc:	77fb      	strb	r3, [r7, #31]
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d9e0      	bls.n	80006a6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	3d79db23 	.word	0x3d79db23
 80006f0:	3df9db23 	.word	0x3df9db23
 80006f4:	3e79db23 	.word	0x3e79db23
 80006f8:	3ef9db23 	.word	0x3ef9db23

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f001 f8ca 	bl	800189a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f927 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fb35 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f000 fb15 	bl	8000d3c <MX_DMA_Init>
  MX_DAC1_Init();
 8000712:	f000 fa23 	bl	8000b5c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000716:	f000 fa93 	bl	8000c40 <MX_TIM2_Init>
  MX_I2C2_Init();
 800071a:	f000 fa51 	bl	8000bc0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800071e:	f000 fadd 	bl	8000cdc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000722:	f000 f9a5 	bl	8000a70 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (BSP_ACCELERO_Init() != ACCELERO_OK){
 8000726:	f000 fe19 	bl	800135c <BSP_ACCELERO_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d004      	beq.n	800073a <main+0x3e>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2108      	movs	r1, #8
 8000734:	487a      	ldr	r0, [pc, #488]	; (8000920 <main+0x224>)
 8000736:	f003 fcf3 	bl	8004120 <HAL_GPIO_WritePin>
  }
  memset(&strBuf[0], 0, sizeof(strBuf));
 800073a:	2264      	movs	r2, #100	; 0x64
 800073c:	2100      	movs	r1, #0
 800073e:	4879      	ldr	r0, [pc, #484]	; (8000924 <main+0x228>)
 8000740:	f006 ff18 	bl	8007574 <memset>

  // Poll ADC
  HAL_ADC_Start(&hadc1);
 8000744:	4878      	ldr	r0, [pc, #480]	; (8000928 <main+0x22c>)
 8000746:	f001 fcc5 	bl	80020d4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800074a:	f04f 31ff 	mov.w	r1, #4294967295
 800074e:	4876      	ldr	r0, [pc, #472]	; (8000928 <main+0x22c>)
 8000750:	f001 fdae 	bl	80022b0 <HAL_ADC_PollForConversion>
  volume = HAL_ADC_GetValue(&hadc1)/3;
 8000754:	4874      	ldr	r0, [pc, #464]	; (8000928 <main+0x22c>)
 8000756:	f001 fe7b 	bl	8002450 <HAL_ADC_GetValue>
 800075a:	4602      	mov	r2, r0
 800075c:	4b73      	ldr	r3, [pc, #460]	; (800092c <main+0x230>)
 800075e:	fba3 2302 	umull	r2, r3, r3, r2
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b72      	ldr	r3, [pc, #456]	; (8000930 <main+0x234>)
 8000768:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 800076a:	486f      	ldr	r0, [pc, #444]	; (8000928 <main+0x22c>)
 800076c:	f001 fd6c 	bl	8002248 <HAL_ADC_Stop>

  // Poll accelerometer
  BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000770:	4870      	ldr	r0, [pc, #448]	; (8000934 <main+0x238>)
 8000772:	f000 fe31 	bl	80013d8 <BSP_ACCELERO_AccGetXYZ>
  conv_accX = MapFreqVal(raw_acc[0]);
 8000776:	4b6f      	ldr	r3, [pc, #444]	; (8000934 <main+0x238>)
 8000778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fc35 	bl	8000fec <MapFreqVal>
 8000782:	eef0 7a40 	vmov.f32	s15, s0
 8000786:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <main+0x23c>)
 8000788:	edc3 7a00 	vstr	s15, [r3]

  // Generate initial tone
  GenerateTone(audioBuffer, (float)volume, conv_accX, TONE_BUFFER_SIZE);
 800078c:	4b68      	ldr	r3, [pc, #416]	; (8000930 <main+0x234>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000798:	4b67      	ldr	r3, [pc, #412]	; (8000938 <main+0x23c>)
 800079a:	ed93 7a00 	vldr	s14, [r3]
 800079e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007a2:	eef0 0a47 	vmov.f32	s1, s14
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	4864      	ldr	r0, [pc, #400]	; (800093c <main+0x240>)
 80007ac:	f000 fb6a 	bl	8000e84 <GenerateTone>

  // Clear error led state
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // clear error led state
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	485a      	ldr	r0, [pc, #360]	; (8000920 <main+0x224>)
 80007b6:	f003 fcb3 	bl	8004120 <HAL_GPIO_WritePin>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80007ba:	4861      	ldr	r0, [pc, #388]	; (8000940 <main+0x244>)
 80007bc:	f005 fde2 	bl	8006384 <HAL_TIM_Base_Start_IT>

  // Start DMA for DAC
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)audioBuffer, TONE_BUFFER_SIZE, DAC_ALIGN_8B_R);
 80007c0:	2308      	movs	r3, #8
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c8:	4a5c      	ldr	r2, [pc, #368]	; (800093c <main+0x240>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	485d      	ldr	r0, [pc, #372]	; (8000944 <main+0x248>)
 80007ce:	f002 fda7 	bl	8003320 <HAL_DAC_Start_DMA>

  // Start in IDLE mode:
  currState = IDLE;
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <main+0x24c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
//	sprintf(strBuf, "%hu\r\n", rawPotVal);
//	HAL_UART_Transmit(&huart1, (uint8_t*)strBuf, strlen(strBuf), HAL_MAX_DELAY);
//	HAL_Delay(100);

	// ----------------------------- LOAD AUDIO SAMPLES FROM FLASH TO DAC USING DMA ------------------------------
	switch (currState){
 80007d8:	4b5b      	ldr	r3, [pc, #364]	; (8000948 <main+0x24c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d003      	beq.n	80007ea <main+0xee>
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d04e      	beq.n	8000884 <main+0x188>
 80007e6:	2b00      	cmp	r3, #0
		case IDLE:
			break;
 80007e8:	e099      	b.n	800091e <main+0x222>

		case HALFPT:
			// Read first half of next note into tones[]
			HAL_ADC_Start(&hadc1);
 80007ea:	484f      	ldr	r0, [pc, #316]	; (8000928 <main+0x22c>)
 80007ec:	f001 fc72 	bl	80020d4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	484c      	ldr	r0, [pc, #304]	; (8000928 <main+0x22c>)
 80007f6:	f001 fd5b 	bl	80022b0 <HAL_ADC_PollForConversion>
			volume = HAL_ADC_GetValue(&hadc1)/3;
 80007fa:	484b      	ldr	r0, [pc, #300]	; (8000928 <main+0x22c>)
 80007fc:	f001 fe28 	bl	8002450 <HAL_ADC_GetValue>
 8000800:	4602      	mov	r2, r0
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <main+0x230>)
 8000804:	fba3 2302 	umull	r2, r3, r3, r2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b48      	ldr	r3, [pc, #288]	; (8000930 <main+0x234>)
 800080e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 8000810:	4845      	ldr	r0, [pc, #276]	; (8000928 <main+0x22c>)
 8000812:	f001 fd19 	bl	8002248 <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 8000816:	4847      	ldr	r0, [pc, #284]	; (8000934 <main+0x238>)
 8000818:	f000 fdde 	bl	80013d8 <BSP_ACCELERO_AccGetXYZ>
			conv_accX = MapFreqVal(raw_acc[0]);
 800081c:	4b45      	ldr	r3, [pc, #276]	; (8000934 <main+0x238>)
 800081e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fbe2 	bl	8000fec <MapFreqVal>
 8000828:	eef0 7a40 	vmov.f32	s15, s0
 800082c:	4b42      	ldr	r3, [pc, #264]	; (8000938 <main+0x23c>)
 800082e:	edc3 7a00 	vstr	s15, [r3]
			rect_limitY = (float)raw_acc[1] / 1024;
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <main+0x238>)
 8000834:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000838:	ee07 3a90 	vmov	s15, r3
 800083c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000840:	eddf 6a42 	vldr	s13, [pc, #264]	; 800094c <main+0x250>
 8000844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <main+0x254>)
 800084a:	edc3 7a00 	vstr	s15, [r3]

//			GenerateTone(audioBuffer, volume, conv_accX, HALF_BUFFER_SIZE);
			GenerateRectTone(audioBuffer, volume, conv_accX, rect_limitY, HALF_BUFFER_SIZE);
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <main+0x234>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <main+0x23c>)
 800085c:	ed93 7a00 	vldr	s14, [r3]
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <main+0x254>)
 8000862:	edd3 6a00 	vldr	s13, [r3]
 8000866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086a:	eeb0 1a66 	vmov.f32	s2, s13
 800086e:	eef0 0a47 	vmov.f32	s1, s14
 8000872:	eeb0 0a67 	vmov.f32	s0, s15
 8000876:	4831      	ldr	r0, [pc, #196]	; (800093c <main+0x240>)
 8000878:	f000 fb54 	bl	8000f24 <GenerateRectTone>

			currState = IDLE;
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <main+0x24c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
			break;
 8000882:	e04c      	b.n	800091e <main+0x222>

		case DONE:
			// Read second half of curr note into tones[]
			HAL_ADC_Start(&hadc1);
 8000884:	4828      	ldr	r0, [pc, #160]	; (8000928 <main+0x22c>)
 8000886:	f001 fc25 	bl	80020d4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800088a:	f04f 31ff 	mov.w	r1, #4294967295
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <main+0x22c>)
 8000890:	f001 fd0e 	bl	80022b0 <HAL_ADC_PollForConversion>
			volume = HAL_ADC_GetValue(&hadc1)/3;
 8000894:	4824      	ldr	r0, [pc, #144]	; (8000928 <main+0x22c>)
 8000896:	f001 fddb 	bl	8002450 <HAL_ADC_GetValue>
 800089a:	4602      	mov	r2, r0
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <main+0x230>)
 800089e:	fba3 2302 	umull	r2, r3, r3, r2
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <main+0x234>)
 80008a8:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80008aa:	481f      	ldr	r0, [pc, #124]	; (8000928 <main+0x22c>)
 80008ac:	f001 fccc 	bl	8002248 <HAL_ADC_Stop>

			BSP_ACCELERO_AccGetXYZ(raw_acc);
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <main+0x238>)
 80008b2:	f000 fd91 	bl	80013d8 <BSP_ACCELERO_AccGetXYZ>
			conv_accX = MapFreqVal(raw_acc[0]);
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <main+0x238>)
 80008b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fb95 	bl	8000fec <MapFreqVal>
 80008c2:	eef0 7a40 	vmov.f32	s15, s0
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <main+0x23c>)
 80008c8:	edc3 7a00 	vstr	s15, [r3]
			rect_limitY = (float)raw_acc[1] / 1024;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <main+0x238>)
 80008ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800094c <main+0x250>
 80008de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <main+0x254>)
 80008e4:	edc3 7a00 	vstr	s15, [r3]

//			GenerateTone(&audioBuffer[HALF_BUFFER_SIZE-1], volume, conv_accX, HALF_BUFFER_SIZE);
			GenerateRectTone(&audioBuffer[HALF_BUFFER_SIZE-1], volume, conv_accX, rect_limitY, HALF_BUFFER_SIZE);
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <main+0x234>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <main+0x23c>)
 80008f6:	ed93 7a00 	vldr	s14, [r3]
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <main+0x254>)
 80008fc:	edd3 6a00 	vldr	s13, [r3]
 8000900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000904:	eeb0 1a66 	vmov.f32	s2, s13
 8000908:	eef0 0a47 	vmov.f32	s1, s14
 800090c:	eeb0 0a67 	vmov.f32	s0, s15
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <main+0x258>)
 8000912:	f000 fb07 	bl	8000f24 <GenerateRectTone>

			currState = IDLE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <main+0x24c>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
			break;
 800091c:	bf00      	nop
	switch (currState){
 800091e:	e75b      	b.n	80007d8 <main+0xdc>
 8000920:	48001000 	.word	0x48001000
 8000924:	20000120 	.word	0x20000120
 8000928:	20000184 	.word	0x20000184
 800092c:	aaaaaaab 	.word	0xaaaaaaab
 8000930:	2000005c 	.word	0x2000005c
 8000934:	20000060 	.word	0x20000060
 8000938:	20000068 	.word	0x20000068
 800093c:	200002b4 	.word	0x200002b4
 8000940:	20000268 	.word	0x20000268
 8000944:	20000074 	.word	0x20000074
 8000948:	20000088 	.word	0x20000088
 800094c:	44800000 	.word	0x44800000
 8000950:	2000006c 	.word	0x2000006c
 8000954:	2000069b 	.word	0x2000069b

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0b8      	sub	sp, #224	; 0xe0
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000962:	2244      	movs	r2, #68	; 0x44
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f006 fe04 	bl	8007574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2288      	movs	r2, #136	; 0x88
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fdf6 	bl	8007574 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000988:	2310      	movs	r3, #16
 800098a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800098e:	2301      	movs	r3, #1
 8000990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800099a:	2360      	movs	r3, #96	; 0x60
 800099c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009a6:	2301      	movs	r3, #1
 80009a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009b2:	2328      	movs	r3, #40	; 0x28
 80009b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b8:	2307      	movs	r3, #7
 80009ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f9e6 	bl	8004da0 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009da:	f000 fb63 	bl	80010a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fdb2 	bl	800556c <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a0e:	f000 fb49 	bl	80010a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8000a12:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a16:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a24:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a26:	2301      	movs	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000a2e:	2318      	movs	r3, #24
 8000a30:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a42:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 ff94 	bl	8005974 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000a52:	f000 fb27 	bl	80010a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5a:	f004 f94b 	bl	8004cf4 <HAL_PWREx_ControlVoltageScaling>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a64:	f000 fb1e 	bl	80010a4 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	37e0      	adds	r7, #224	; 0xe0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000af4:	f001 f99a 	bl	8001e2c <HAL_ADC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000afe:	f000 fad1 	bl	80010a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000b0e:	f002 fa27 	bl	8002f60 <HAL_ADCEx_MultiModeConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b18:	f000 fac4 	bl	80010a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_ADC1_Init+0xe8>)
 8000b1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b20:	2306      	movs	r3, #6
 8000b22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b28:	237f      	movs	r3, #127	; 0x7f
 8000b2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_ADC1_Init+0xe0>)
 8000b3a:	f001 fc97 	bl	800246c <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b44:	f000 faae 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000184 	.word	0x20000184
 8000b54:	50040000 	.word	0x50040000
 8000b58:	3ac04000 	.word	0x3ac04000

08000b5c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2224      	movs	r2, #36	; 0x24
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 fd03 	bl	8007574 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_DAC1_Init+0x5c>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_DAC1_Init+0x60>)
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b74:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <MX_DAC1_Init+0x5c>)
 8000b76:	f002 fbb0 	bl	80032da <HAL_DAC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b80:	f000 fa90 	bl	80010a4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b88:	2324      	movs	r3, #36	; 0x24
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_DAC1_Init+0x5c>)
 8000ba0:	f002 fc86 	bl	80034b0 <HAL_DAC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 fa7b 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000074 	.word	0x20000074
 8000bbc:	40007400 	.word	0x40007400

08000bc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_I2C2_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_I2C2_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000bfc:	f003 facb 	bl	8004196 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 fa4d 	bl	80010a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000c0e:	f003 ffcb 	bl	8004ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 fa44 	bl	80010a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_I2C2_Init+0x74>)
 8000c20:	f004 f80d 	bl	8004c3e <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 fa3b 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000008c 	.word	0x2000008c
 8000c38:	40005800 	.word	0x40005800
 8000c3c:	10909cec 	.word	0x10909cec

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c74:	f240 7216 	movw	r2, #1814	; 0x716
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000c88:	f005 fb24 	bl	80062d4 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c92:	f000 fa07 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000ca4:	f005 fcfd 	bl	80066a2 <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cae:	f000 f9f9 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_TIM2_Init+0x98>)
 8000cc0:	f005 ff0e 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cca:	f000 f9eb 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000268 	.word	0x20000268

08000cdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_USART1_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART1_UART_Init+0x58>)
 8000d20:	f005 ff84 	bl	8006c2c <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 f9bb 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200001e8 	.word	0x200001e8
 8000d38:	40013800 	.word	0x40013800

08000d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_DMA_Init+0x38>)
 8000d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <MX_DMA_Init+0x38>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_DMA_Init+0x38>)
 8000d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200d      	movs	r0, #13
 8000d60:	f002 fa85 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d64:	200d      	movs	r0, #13
 8000d66:	f002 fa9e 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_GPIO_Init+0xf8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_GPIO_Init+0xfc>)
 8000df4:	f003 f994 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	481e      	ldr	r0, [pc, #120]	; (8000e78 <MX_GPIO_Init+0x100>)
 8000e00:	f003 f98e 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000e04:	2308      	movs	r3, #8
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4816      	ldr	r0, [pc, #88]	; (8000e74 <MX_GPIO_Init+0xfc>)
 8000e1c:	f002 fee4 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_GPIO_Init+0x104>)
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <MX_GPIO_Init+0x108>)
 8000e36:	f002 fed7 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_GPIO_Init+0x100>)
 8000e54:	f002 fec8 	bl	8003be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2028      	movs	r0, #40	; 0x28
 8000e5e:	f002 fa06 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e62:	2028      	movs	r0, #40	; 0x28
 8000e64:	f002 fa1f 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48001000 	.word	0x48001000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	48000800 	.word	0x48000800

08000e84 <GenerateTone>:

/* USER CODE BEGIN 4 */

void GenerateTone(uint8_t *array, float vol, float freq, uint32_t nSamples){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6178      	str	r0, [r7, #20]
 8000e8c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e90:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
	float twopi = 6.283185307;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <GenerateTone+0x98>)
 8000e98:	623b      	str	r3, [r7, #32]
	float angStep = twopi * freq / SAMPLING_FREQ;
 8000e9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000f20 <GenerateTone+0x9c>
 8000eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eae:	edc7 7a07 	vstr	s15, [r7, #28]
	float currAngle = 0;
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < (nSamples); i++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	e025      	b.n	8000f0a <GenerateTone+0x86>
		currAngle = i * angStep;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed0:	edc7 7a06 	vstr	s15, [r7, #24]
		array[i] = (uint8_t)(vol + (vol * arm_sin_f32(currAngle)));
 8000ed4:	ed97 0a06 	vldr	s0, [r7, #24]
 8000ed8:	f006 fae2 	bl	80074a0 <arm_sin_f32>
 8000edc:	eeb0 7a40 	vmov.f32	s14, s0
 8000ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	4413      	add	r3, r2
 8000ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efa:	edc7 7a01 	vstr	s15, [r7, #4]
 8000efe:	793a      	ldrb	r2, [r7, #4]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (nSamples); i++){
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3301      	adds	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3d5      	bcc.n	8000ebe <GenerateTone+0x3a>
	}

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40c90fdb 	.word	0x40c90fdb
 8000f20:	472c4400 	.word	0x472c4400

08000f24 <GenerateRectTone>:


void GenerateRectTone(uint8_t *array, float vol, float freq, float dist, uint32_t nSamples){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6178      	str	r0, [r7, #20]
 8000f2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f30:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f34:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f38:	6079      	str	r1, [r7, #4]
	float twopi = 6.283185307;
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <GenerateRectTone+0xc0>)
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
	float angStep = twopi * freq / SAMPLING_FREQ;
 8000f3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000fe8 <GenerateRectTone+0xc4>
 8000f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float currAngle = 0;
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
	float tempSample = vol;
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	61fb      	str	r3, [r7, #28]

	for (uint32_t i = 0; i < (nSamples); i++){
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f64:	e036      	b.n	8000fd4 <GenerateRectTone+0xb0>
		currAngle = i * angStep;
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f78:	edc7 7a08 	vstr	s15, [r7, #32]
		tempSample = arm_sin_f32(currAngle);
 8000f7c:	ed97 0a08 	vldr	s0, [r7, #32]
 8000f80:	f006 fa8e 	bl	80074a0 <arm_sin_f32>
 8000f84:	ed87 0a07 	vstr	s0, [r7, #28]
		if (tempSample > dist)
 8000f88:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	dd14      	ble.n	8000fc4 <GenerateRectTone+0xa0>
			array[i] = (uint8_t)(vol + vol*tempSample);
 8000f9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb2:	4413      	add	r3, r2
 8000fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb8:	edc7 7a00 	vstr	s15, [r7]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e004      	b.n	8000fce <GenerateRectTone+0xaa>
		else
			array[i] = 0;
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	4413      	add	r3, r2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < (nSamples); i++){
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3c4      	bcc.n	8000f66 <GenerateRectTone+0x42>
	}

}
 8000fdc:	bf00      	nop
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40c90fdb 	.word	0x40c90fdb
 8000fe8:	472c4400 	.word	0x472c4400

08000fec <MapFreqVal>:


float MapFreqVal(int16_t x){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]

  float x_l;
  if (x < -1000){
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000ffe:	da02      	bge.n	8001006 <MapFreqVal+0x1a>
	  x_l = -1000;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MapFreqVal+0x54>)
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e007      	b.n	8001016 <MapFreqVal+0x2a>
  }
  else{
	  x_l = (float)x;
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	edc7 7a03 	vstr	s15, [r7, #12]
//  float in_min = -1000;
//  float in_max = 1000;
//  float out_min = 4300;
//  float out_max = 300;
//  return (((x_l - in_min) * (out_max - out_min) / (in_max - in_min) + out_min));
  return (((x_l + 1000) * (-2) + 4300));
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001044 <MapFreqVal+0x58>
 800101e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001022:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001048 <MapFreqVal+0x5c>
 800102e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	c47a0000 	.word	0xc47a0000
 8001044:	447a0000 	.word	0x447a0000
 8001048:	45866000 	.word	0x45866000

0800104c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d102      	bne.n	8001064 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>
		currState = HALFPT;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	}
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40007400 	.word	0x40007400
 8001074:	20000088 	.word	0x20000088

08001078 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d102      	bne.n	8001090 <HAL_DAC_ConvCpltCallbackCh1+0x18>
		currState = DONE;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40007400 	.word	0x40007400
 80010a0:	20000088 	.word	0x20000088

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <Error_Handler+0x14>)
 80010ae:	f003 f837 	bl	8004120 <HAL_GPIO_WritePin>
  __BKPT();
 80010b2:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48001000 	.word	0x48001000

080010bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <I2Cx_MspInit+0xa8>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <I2Cx_MspInit+0xa8>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <I2Cx_MspInit+0xa8>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80010dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80010e2:	2312      	movs	r3, #18
 80010e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80010ee:	2304      	movs	r3, #4
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <I2Cx_MspInit+0xac>)
 80010fa:	f002 fd75 	bl	8003be8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <I2Cx_MspInit+0xac>)
 8001106:	f002 fd6f 	bl	8003be8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <I2Cx_MspInit+0xa8>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <I2Cx_MspInit+0xa8>)
 8001134:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001138:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	210f      	movs	r1, #15
 800113e:	2021      	movs	r0, #33	; 0x21
 8001140:	f002 f895 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001144:	2021      	movs	r0, #33	; 0x21
 8001146:	f002 f8ae 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	210f      	movs	r1, #15
 800114e:	2022      	movs	r0, #34	; 0x22
 8001150:	f002 f88d 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001154:	2022      	movs	r0, #34	; 0x22
 8001156:	f002 f8a6 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <I2Cx_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <I2Cx_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff89 	bl	80010bc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f002 fff3 	bl	8004196 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80011b0:	2100      	movs	r1, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f003 fcf8 	bl	8004ba8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005800 	.word	0x40005800
 80011c4:	00702681 	.word	0x00702681

080011c8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	4608      	mov	r0, r1
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	460b      	mov	r3, r1
 80011dc:	813b      	strh	r3, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	b299      	uxth	r1, r3
 80011ea:	88f8      	ldrh	r0, [r7, #6]
 80011ec:	893a      	ldrh	r2, [r7, #8]
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 f99c 	bl	800453c <HAL_I2C_Mem_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	4619      	mov	r1, r3
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f832 	bl	800127c <I2Cx_Error>
  }
  return status;
 8001218:	7dfb      	ldrb	r3, [r7, #23]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b08a      	sub	sp, #40	; 0x28
 8001226:	af04      	add	r7, sp, #16
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	4608      	mov	r0, r1
 800122c:	4611      	mov	r1, r2
 800122e:	461a      	mov	r2, r3
 8001230:	4603      	mov	r3, r0
 8001232:	72fb      	strb	r3, [r7, #11]
 8001234:	460b      	mov	r3, r1
 8001236:	813b      	strh	r3, [r7, #8]
 8001238:	4613      	mov	r3, r2
 800123a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	b299      	uxth	r1, r3
 8001244:	88f8      	ldrh	r0, [r7, #6]
 8001246:	893a      	ldrh	r2, [r7, #8]
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4603      	mov	r3, r0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f003 f85b 	bl	8004314 <HAL_I2C_Mem_Write>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	4619      	mov	r1, r3
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f805 	bl	800127c <I2Cx_Error>
  }
  return status;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f003 f813 	bl	80042b4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff6c 	bl	800116c <I2Cx_Init>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <SENSOR_IO_Init+0x10>)
 80012a2:	f7ff ff63 	bl	800116c <I2Cx_Init>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000b04 	.word	0x20000b04

080012b0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	79f9      	ldrb	r1, [r7, #7]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	1d7b      	adds	r3, r7, #5
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <SENSOR_IO_Write+0x30>)
 80012d4:	f7ff ffa5 	bl	8001222 <I2Cx_WriteMultiple>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000b04 	.word	0x20000b04

080012e4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	79f9      	ldrb	r1, [r7, #7]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	f107 030f 	add.w	r3, r7, #15
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <SENSOR_IO_Read+0x38>)
 800130c:	f7ff ff5c 	bl	80011c8 <I2Cx_ReadMultiple>

  return read_value;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000b04 	.word	0x20000b04

08001320 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
 8001326:	603a      	str	r2, [r7, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	460b      	mov	r3, r1
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	b29a      	uxth	r2, r3
 800133a:	79f9      	ldrb	r1, [r7, #7]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <SENSOR_IO_ReadMultiple+0x38>)
 8001348:	f7ff ff3e 	bl	80011c8 <I2Cx_ReadMultiple>
 800134c:	4603      	mov	r3, r0
 800134e:	b29b      	uxth	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000b04 	.word	0x20000b04

0800135c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001366:	2300      	movs	r3, #0
 8001368:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <BSP_ACCELERO_Init+0x74>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	2b6a      	cmp	r3, #106	; 0x6a
 8001374:	d002      	beq.n	800137c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e024      	b.n	80013c6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_ACCELERO_Init+0x78>)
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <BSP_ACCELERO_Init+0x74>)
 8001380:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001382:	2330      	movs	r3, #48	; 0x30
 8001384:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800138a:	2300      	movs	r3, #0
 800138c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800139a:	797a      	ldrb	r2, [r7, #5]
 800139c:	7abb      	ldrb	r3, [r7, #10]
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80013a4:	7a3b      	ldrb	r3, [r7, #8]
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <BSP_ACCELERO_Init+0x78>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	89ba      	ldrh	r2, [r7, #12]
 80013c2:	4610      	mov	r0, r2
 80013c4:	4798      	blx	r3
  }  

  return ret;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000070 	.word	0x20000070

080013d8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000070 	.word	0x20000070

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_MspInit+0x44>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	; 0x60
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x44>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x44>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6593      	str	r3, [r2, #88]	; 0x58
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_ADC_MspInit+0x74>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d123      	bne.n	80014ba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 8001478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_ADC_MspInit+0x78>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014a2:	2320      	movs	r3, #32
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014a6:	230b      	movs	r3, #11
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_ADC_MspInit+0x7c>)
 80014b6:	f002 fb97 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	50040000 	.word	0x50040000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000800 	.word	0x48000800

080014d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <HAL_DAC_MspInit+0xc8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d14d      	bne.n	800158e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HAL_DAC_MspInit+0xcc>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_DAC_MspInit+0xcc>)
 80014f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_DAC_MspInit+0xcc>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_DAC_MspInit+0xcc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_DAC_MspInit+0xcc>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_DAC_MspInit+0xcc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001522:	2310      	movs	r3, #16
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f002 fb56 	bl	8003be8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_DAC_MspInit+0xd4>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001544:	2206      	movs	r2, #6
 8001546:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 800154a:	2210      	movs	r2, #16
 800154c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001568:	2220      	movs	r2, #32
 800156a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001574:	f002 f940 	bl	80037f8 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800157e:	f7ff fd91 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_DAC_MspInit+0xd0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40007400 	.word	0x40007400
 800159c:	40021000 	.word	0x40021000
 80015a0:	200000d8 	.word	0x200000d8
 80015a4:	40020030 	.word	0x40020030

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_I2C_MspInit+0x7c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d128      	bne.n	800161c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_I2C_MspInit+0x80>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <HAL_I2C_MspInit+0x80>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_I2C_MspInit+0x80>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f4:	2304      	movs	r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_I2C_MspInit+0x84>)
 8001600:	f002 faf2 	bl	8003be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_I2C_MspInit+0x80>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_I2C_MspInit+0x80>)
 800160a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_I2C_MspInit+0x80>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40005800 	.word	0x40005800
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400

08001630 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_I2C_MspDeInit+0x3c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10f      	bne.n	8001662 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_I2C_MspDeInit+0x40>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_I2C_MspDeInit+0x40>)
 8001648:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800164e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <HAL_I2C_MspDeInit+0x44>)
 8001654:	f002 fc70 	bl	8003f38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_I2C_MspDeInit+0x44>)
 800165e:	f002 fc6b 	bl	8003f38 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005800 	.word	0x40005800
 8001670:	40021000 	.word	0x40021000
 8001674:	48000400 	.word	0x48000400

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d113      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f001 fde1 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f001 fdfa 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_UART_MspInit+0x7c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d127      	bne.n	8001732 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_UART_MspInit+0x80>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <HAL_UART_MspInit+0x80>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6613      	str	r3, [r2, #96]	; 0x60
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_UART_MspInit+0x80>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_UART_MspInit+0x80>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_UART_MspInit+0x80>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_UART_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001722:	2307      	movs	r3, #7
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_UART_MspInit+0x84>)
 800172e:	f002 fa5b 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40013800 	.word	0x40013800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f8d2 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel3_IRQHandler+0x10>)
 80017aa:	f002 f93d 	bl	8003a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000d8 	.word	0x200000d8

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f004 fe51 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000268 	.word	0x20000268

080017cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017d4:	f002 fcbc 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <SystemInit+0x64>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <SystemInit+0x64>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <SystemInit+0x68>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <SystemInit+0x68>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <SystemInit+0x68>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <SystemInit+0x68>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <SystemInit+0x68>)
 8001808:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800180c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001810:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <SystemInit+0x68>)
 8001814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001818:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <SystemInit+0x68>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <SystemInit+0x68>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <SystemInit+0x68>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SystemInit+0x64>)
 800182e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001832:	609a      	str	r2, [r3, #8]
#endif
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	40021000 	.word	0x40021000

08001848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff ffc6 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001850:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001856:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001858:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <LoopForever+0xa>)
	ldr	r3, =_edata
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001860:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001862:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
	ldr	r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800186a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <LoopForever+0x16>)
	cmp	r2, r3
 8001872:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f005 fe59 	bl	800752c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187a:	f7fe ff3f 	bl	80006fc <main>

0800187e <LoopForever>:

LoopForever:
    b LoopForever
 800187e:	e7fe      	b.n	800187e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001880:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001884:	08007df8 	.word	0x08007df8
	ldr	r0, =_sdata
 8001888:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800188c:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8001890:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 8001894:	20000b54 	.word	0x20000b54

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>

0800189a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 fcd7 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f80e 	bl	80018cc <HAL_InitTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e001      	b.n	80018c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018bc:	f7ff fda4 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_InitTick+0x6c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_InitTick+0x70>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_InitTick+0x6c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fce3 	bl	80032c2 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d809      	bhi.n	800191c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f001 fcad 	bl	800326e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_InitTick+0x74>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e007      	b.n	800192c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e004      	b.n	800192c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e001      	b.n	800192c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000003c 	.word	0x2000003c
 800193c:	20000034 	.word	0x20000034
 8001940:	20000038 	.word	0x20000038

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000003c 	.word	0x2000003c
 8001968:	20000b50 	.word	0x20000b50

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000b50 	.word	0x20000b50

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_Delay+0x40>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000003c 	.word	0x2000003c

080019c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3360      	adds	r3, #96	; 0x60
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <LL_ADC_SetOffset+0x44>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	03fff000 	.word	0x03fff000

08001a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3360      	adds	r3, #96	; 0x60
 8001a86:	461a      	mov	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3360      	adds	r3, #96	; 0x60
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3330      	adds	r3, #48	; 0x30
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	211f      	movs	r1, #31
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	f003 011f 	and.w	r1, r3, #31
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3314      	adds	r3, #20
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	0e5b      	lsrs	r3, r3, #25
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	0d1b      	lsrs	r3, r3, #20
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2107      	movs	r1, #7
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0d1b      	lsrs	r3, r3, #20
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0318 	and.w	r3, r3, #24
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	400b      	ands	r3, r1
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	431a      	orrs	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	0007ffff 	.word	0x0007ffff

08001bf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 031f 	and.w	r3, r3, #31
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6093      	str	r3, [r2, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d08:	f043 0202 	orr.w	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsEnabled+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsEnabled+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsDisableOngoing+0x18>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsDisableOngoing+0x1a>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7c:	f043 0204 	orr.w	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da4:	f043 0210 	orr.w	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d101      	bne.n	8001dd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e134      	b.n	80020b0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fafb 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fef1 	bl	8001c54 <LL_ADC_IsDeepPowerDownEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fed7 	bl	8001c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff0c 	bl	8001ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d113      	bne.n	8001eba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fef0 	bl	8001c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e9c:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <HAL_ADC_Init+0x28c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	4a86      	ldr	r2, [pc, #536]	; (80020bc <HAL_ADC_Init+0x290>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fef0 	bl	8001ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff64 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80cf 	bne.w	800209e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 80cb 	bne.w	800209e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f10:	f043 0202 	orr.w	r2, r3, #2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fefd 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d115      	bne.n	8001f54 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f28:	4865      	ldr	r0, [pc, #404]	; (80020c0 <HAL_ADC_Init+0x294>)
 8001f2a:	f7ff fef7 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	4864      	ldr	r0, [pc, #400]	; (80020c4 <HAL_ADC_Init+0x298>)
 8001f32:	f7ff fef3 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	431c      	orrs	r4, r3
 8001f3a:	4863      	ldr	r0, [pc, #396]	; (80020c8 <HAL_ADC_Init+0x29c>)
 8001f3c:	f7ff feee 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4323      	orrs	r3, r4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	485f      	ldr	r0, [pc, #380]	; (80020cc <HAL_ADC_Init+0x2a0>)
 8001f50:	f7ff fd3a 	bl	80019c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7e5b      	ldrb	r3, [r3, #25]
 8001f58:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f64:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f6a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d106      	bne.n	8001f90 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_ADC_Init+0x2a4>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fef7 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8001fca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff18 	bl	8001e06 <LL_ADC_INJ_IsConversionOngoing>
 8001fd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d13d      	bne.n	800205a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d13a      	bne.n	800205a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002000:	f023 0302 	bic.w	r3, r3, #2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	69b9      	ldr	r1, [r7, #24]
 800200a:	430b      	orrs	r3, r1
 800200c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002014:	2b01      	cmp	r3, #1
 8002016:	d118      	bne.n	800204a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002022:	f023 0304 	bic.w	r3, r3, #4
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800203a:	430a      	orrs	r2, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	e007      	b.n	800205a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10c      	bne.n	800207c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f023 010f 	bic.w	r1, r3, #15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
 800207a:	e007      	b.n	800208c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020f 	bic.w	r2, r2, #15
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f023 0303 	bic.w	r3, r3, #3
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
 800209c:	e007      	b.n	80020ae <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3724      	adds	r7, #36	; 0x24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	20000034 	.word	0x20000034
 80020bc:	053e2d63 	.word	0x053e2d63
 80020c0:	50040000 	.word	0x50040000
 80020c4:	50040100 	.word	0x50040100
 80020c8:	50040200 	.word	0x50040200
 80020cc:	50040300 	.word	0x50040300
 80020d0:	fff0c007 	.word	0xfff0c007

080020d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020dc:	4857      	ldr	r0, [pc, #348]	; (800223c <HAL_ADC_Start+0x168>)
 80020de:	f7ff fd8b 	bl	8001bf8 <LL_ADC_GetMultimode>
 80020e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe65 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 809c 	bne.w	800222e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_Start+0x30>
 8002100:	2302      	movs	r3, #2
 8002102:	e097      	b.n	8002234 <HAL_ADC_Start+0x160>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fe4f 	bl	8002db0 <ADC_Enable>
 8002112:	4603      	mov	r3, r0
 8002114:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 8083 	bne.w	8002224 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_ADC_Start+0x16c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d002      	beq.n	8002142 <HAL_ADC_Start+0x6e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e000      	b.n	8002144 <HAL_ADC_Start+0x70>
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_ADC_Start+0x170>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4293      	cmp	r3, r2
 800214a:	d002      	beq.n	8002152 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216a:	d106      	bne.n	800217a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f023 0206 	bic.w	r2, r3, #6
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
 8002178:	e002      	b.n	8002180 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	221c      	movs	r2, #28
 8002186:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_ADC_Start+0x16c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d002      	beq.n	80021a0 <HAL_ADC_Start+0xcc>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e000      	b.n	80021a2 <HAL_ADC_Start+0xce>
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_ADC_Start+0x170>)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d008      	beq.n	80021bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d002      	beq.n	80021bc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d114      	bne.n	80021e6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fdc2 	bl	8001d68 <LL_ADC_REG_StartConversion>
 80021e4:	e025      	b.n	8002232 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_ADC_Start+0x16c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d002      	beq.n	8002202 <HAL_ADC_Start+0x12e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	e000      	b.n	8002204 <HAL_ADC_Start+0x130>
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_ADC_Start+0x170>)
 8002204:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00f      	beq.n	8002232 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800221a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
 8002222:	e006      	b.n	8002232 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800222c:	e001      	b.n	8002232 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	50040300 	.word	0x50040300
 8002240:	50040100 	.word	0x50040100
 8002244:	50040000 	.word	0x50040000

08002248 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_Stop+0x16>
 800225a:	2302      	movs	r3, #2
 800225c:	e023      	b.n	80022a6 <HAL_ADC_Stop+0x5e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002266:	2103      	movs	r1, #3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fced 	bl	8002c48 <ADC_ConversionStop>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fdf3 	bl	8002e64 <ADC_Disable>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ba:	4862      	ldr	r0, [pc, #392]	; (8002444 <HAL_ADC_PollForConversion+0x194>)
 80022bc:	f7ff fc9c 	bl	8001bf8 <LL_ADC_GetMultimode>
 80022c0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d102      	bne.n	80022d0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022ca:	2308      	movs	r3, #8
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e02a      	b.n	8002326 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d111      	bne.n	8002306 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e09d      	b.n	800243c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002300:	2304      	movs	r3, #4
 8002302:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002304:	e00f      	b.n	8002326 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002306:	484f      	ldr	r0, [pc, #316]	; (8002444 <HAL_ADC_PollForConversion+0x194>)
 8002308:	f7ff fc84 	bl	8001c14 <LL_ADC_GetMultiDMATransfer>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e08c      	b.n	800243c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002322:	2304      	movs	r3, #4
 8002324:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002326:	f7ff fb21 	bl	800196c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800232c:	e01a      	b.n	8002364 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d016      	beq.n	8002364 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002336:	f7ff fb19 	bl	800196c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <HAL_ADC_PollForConversion+0x9c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e06b      	b.n	800243c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0dd      	beq.n	800232e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fba9 	bl	8001ada <LL_ADC_REG_IsTriggerSourceSWStart>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01c      	beq.n	80023c8 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7e5b      	ldrb	r3, [r3, #25]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d111      	bne.n	80023c8 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_ADC_PollForConversion+0x198>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d002      	beq.n	80023d8 <HAL_ADC_PollForConversion+0x128>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e000      	b.n	80023da <HAL_ADC_PollForConversion+0x12a>
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_ADC_PollForConversion+0x19c>)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4293      	cmp	r3, r2
 80023e0:	d008      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d002      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d104      	bne.n	80023fe <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e00c      	b.n	8002418 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_ADC_PollForConversion+0x198>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d002      	beq.n	800240e <HAL_ADC_PollForConversion+0x15e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	e000      	b.n	8002410 <HAL_ADC_PollForConversion+0x160>
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_ADC_PollForConversion+0x19c>)
 8002410:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b08      	cmp	r3, #8
 800241c:	d104      	bne.n	8002428 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e008      	b.n	800243a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	50040300 	.word	0x50040300
 8002448:	50040100 	.word	0x50040100
 800244c:	50040000 	.word	0x50040000

08002450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0b6      	sub	sp, #216	; 0xd8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x22>
 800248a:	2302      	movs	r3, #2
 800248c:	e3c6      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7b0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fc8c 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 83a7 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d824      	bhi.n	80024fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	3b02      	subs	r3, #2
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d81b      	bhi.n	80024f2 <HAL_ADC_ConfigChannel+0x86>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <HAL_ADC_ConfigChannel+0x54>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024d9 	.word	0x080024d9
 80024c8:	080024e1 	.word	0x080024e1
 80024cc:	080024e9 	.word	0x080024e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	220c      	movs	r2, #12
 80024d4:	605a      	str	r2, [r3, #4]
          break;
 80024d6:	e011      	b.n	80024fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2212      	movs	r2, #18
 80024dc:	605a      	str	r2, [r3, #4]
          break;
 80024de:	e00d      	b.n	80024fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2218      	movs	r2, #24
 80024e4:	605a      	str	r2, [r3, #4]
          break;
 80024e6:	e009      	b.n	80024fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ee:	605a      	str	r2, [r3, #4]
          break;
 80024f0:	e004      	b.n	80024fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2206      	movs	r2, #6
 80024f6:	605a      	str	r2, [r3, #4]
          break;
 80024f8:	e000      	b.n	80024fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	f7ff faf9 	bl	8001b00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fc50 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8002518:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc70 	bl	8001e06 <LL_ADC_INJ_IsConversionOngoing>
 8002526:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 81a6 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 81a1 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff fb04 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00a      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002582:	f7ff fa55 	bl	8001a30 <LL_ADC_SetOffset>
 8002586:	e17b      	b.n	8002880 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa72 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x148>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fa67 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	e01e      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x186>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fa5c 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80025e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_ConfigChannel+0x19e>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	e018      	b.n	800263c <HAL_ADC_ConfigChannel+0x1d0>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800261e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e004      	b.n	800263c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fa2b 	bl	8001aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fa0f 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10a      	bne.n	800267a <HAL_ADC_ConfigChannel+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fa04 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	e01e      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x24c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f9f9 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e004      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80026ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x264>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	e018      	b.n	8002702 <HAL_ADC_ConfigChannel+0x296>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80026f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f9c8 	bl	8001aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f9ac 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x2d4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f9a1 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e01e      	b.n	800277e <HAL_ADC_ConfigChannel+0x312>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f996 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800275e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e004      	b.n	800277c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x32a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	e016      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x358>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80027b6:	2320      	movs	r3, #32
 80027b8:	e004      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80027ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d106      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f967 	bl	8001aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2103      	movs	r1, #3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f94b 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x396>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2103      	movs	r1, #3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f940 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	e017      	b.n	8002832 <HAL_ADC_ConfigChannel+0x3c6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2103      	movs	r1, #3
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f935 	bl	8001a78 <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800281a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800281c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800281e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3de>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	e011      	b.n	800286e <HAL_ADC_ConfigChannel+0x402>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e003      	b.n	800286e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f912 	bl	8001aa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fa49 	bl	8001d1c <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 813f 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7ff f986 	bl	8001bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a8e      	ldr	r2, [pc, #568]	; (8002ae4 <HAL_ADC_ConfigChannel+0x678>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 8130 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x46c>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e019      	b.n	800290c <HAL_ADC_ConfigChannel+0x4a0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80028f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2b09      	cmp	r3, #9
 8002904:	bf94      	ite	ls
 8002906:	2301      	movls	r3, #1
 8002908:	2300      	movhi	r3, #0
 800290a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	2b00      	cmp	r3, #0
 800290e:	d079      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_ADC_ConfigChannel+0x4c0>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	e015      	b.n	8002958 <HAL_ADC_ConfigChannel+0x4ec>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d109      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x50c>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	e017      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x53c>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	ea42 0103 	orr.w	r1, r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x562>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	051b      	lsls	r3, r3, #20
 80029cc:	e018      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x594>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80029ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a00:	430b      	orrs	r3, r1
 8002a02:	e080      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x5b4>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1e:	e015      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x5e0>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	069b      	lsls	r3, r3, #26
 8002a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x600>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	e017      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x630>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	ea42 0103 	orr.w	r1, r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x65c>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	3b1e      	subs	r3, #30
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	e01d      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x698>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	613b      	str	r3, [r7, #16]
  return result;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e005      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x684>
 8002ae4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	430b      	orrs	r3, r1
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7ff f824 	bl	8001b58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d079      	beq.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1c:	4842      	ldr	r0, [pc, #264]	; (8002c28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b1e:	f7fe ff79 	bl	8001a14 <LL_ADC_GetCommonPathInternalCh>
 8002b22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d12b      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d125      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3b      	ldr	r2, [pc, #236]	; (8002c30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x6e4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d15c      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4833      	ldr	r0, [pc, #204]	; (8002c28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b5c:	f7fe ff47 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	099a      	lsrs	r2, r3, #6
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b86:	e040      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2c      	ldr	r2, [pc, #176]	; (8002c40 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d118      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x758>
 8002b92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d112      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x746>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12d      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	4619      	mov	r1, r3
 8002bbc:	481a      	ldr	r0, [pc, #104]	; (8002c28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bbe:	f7fe ff16 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc2:	e024      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d120      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11a      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d115      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bec:	4619      	mov	r1, r3
 8002bee:	480e      	ldr	r0, [pc, #56]	; (8002c28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bf0:	f7fe fefd 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
 8002bf4:	e00c      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c0e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c18:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	37d8      	adds	r7, #216	; 0xd8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	80080000 	.word	0x80080000
 8002c28:	50040300 	.word	0x50040300
 8002c2c:	c7520000 	.word	0xc7520000
 8002c30:	50040000 	.word	0x50040000
 8002c34:	50040200 	.word	0x50040200
 8002c38:	20000034 	.word	0x20000034
 8002c3c:	053e2d63 	.word	0x053e2d63
 8002c40:	cb840000 	.word	0xcb840000
 8002c44:	80000001 	.word	0x80000001

08002c48 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f8aa 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8002c64:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f8cb 	bl	8001e06 <LL_ADC_INJ_IsConversionOngoing>
 8002c70:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8090 	beq.w	8002da0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02a      	beq.n	8002ce4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7e5b      	ldrb	r3, [r3, #25]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d126      	bne.n	8002ce4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7e1b      	ldrb	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d122      	bne.n	8002ce4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ca2:	e014      	b.n	8002cce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4a41      	ldr	r2, [pc, #260]	; (8002dac <ADC_ConversionStop+0x164>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d90d      	bls.n	8002cc8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0210 	orr.w	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e06c      	b.n	8002da2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d1e3      	bne.n	8002ca4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2240      	movs	r2, #64	; 0x40
 8002ce2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d014      	beq.n	8002d14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f862 	bl	8001db8 <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f81f 	bl	8001d42 <LL_ADC_IsDisableOngoing>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f83e 	bl	8001d90 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d014      	beq.n	8002d44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f871 	bl	8001e06 <LL_ADC_INJ_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f807 	bl	8001d42 <LL_ADC_IsDisableOngoing>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f84d 	bl	8001dde <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d004      	beq.n	8002d54 <ADC_ConversionStop+0x10c>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d105      	bne.n	8002d5a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d4e:	230c      	movs	r3, #12
 8002d50:	617b      	str	r3, [r7, #20]
        break;
 8002d52:	e005      	b.n	8002d60 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d54:	2308      	movs	r3, #8
 8002d56:	617b      	str	r3, [r7, #20]
        break;
 8002d58:	e002      	b.n	8002d60 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	617b      	str	r3, [r7, #20]
        break;
 8002d5e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d60:	f7fe fe04 	bl	800196c <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d66:	e014      	b.n	8002d92 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d68:	f7fe fe00 	bl	800196c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d90d      	bls.n	8002d92 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e3      	bne.n	8002d68 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	a33fffff 	.word	0xa33fffff

08002db0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe ffad 	bl	8001d1c <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d146      	bne.n	8002e56 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <ADC_Enable+0xb0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f043 0210 	orr.w	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e032      	b.n	8002e58 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ff68 	bl	8001ccc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fdb6 	bl	800196c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e02:	e021      	b.n	8002e48 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ff87 	bl	8001d1c <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe ff57 	bl	8001ccc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e1e:	f7fe fda5 	bl	800196c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d90d      	bls.n	8002e48 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d1d6      	bne.n	8002e04 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	8000003f 	.word	0x8000003f

08002e64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe ff66 	bl	8001d42 <LL_ADC_IsDisableOngoing>
 8002e76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe ff4d 	bl	8001d1c <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d040      	beq.n	8002f0a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d13d      	bne.n	8002f0a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030d 	and.w	r3, r3, #13
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10c      	bne.n	8002eb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe ff27 	bl	8001cf4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eae:	f7fe fd5d 	bl	800196c <HAL_GetTick>
 8002eb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eb4:	e022      	b.n	8002efc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01c      	b.n	8002f0c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ed2:	f7fe fd4b 	bl	800196c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d90d      	bls.n	8002efc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f043 0201 	orr.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e007      	b.n	8002f0c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <LL_ADC_IsEnabled>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_IsEnabled+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_IsEnabled+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b09f      	sub	sp, #124	; 0x7c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e08f      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a47      	ldr	r2, [pc, #284]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	e001      	b.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e072      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ffbd 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffb7 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d154      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d151      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fda:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02c      	beq.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff6:	035b      	lsls	r3, r3, #13
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003000:	4829      	ldr	r0, [pc, #164]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003002:	f7ff ff87 	bl	8002f14 <LL_ADC_IsEnabled>
 8003006:	4604      	mov	r4, r0
 8003008:	4828      	ldr	r0, [pc, #160]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800300a:	f7ff ff83 	bl	8002f14 <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	431c      	orrs	r4, r3
 8003012:	4828      	ldr	r0, [pc, #160]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003014:	f7ff ff7e 	bl	8002f14 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	4323      	orrs	r3, r4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d137      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003028:	f023 030f 	bic.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	6811      	ldr	r1, [r2, #0]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	430a      	orrs	r2, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800303c:	e028      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800304a:	4817      	ldr	r0, [pc, #92]	; (80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800304c:	f7ff ff62 	bl	8002f14 <LL_ADC_IsEnabled>
 8003050:	4604      	mov	r4, r0
 8003052:	4816      	ldr	r0, [pc, #88]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003054:	f7ff ff5e 	bl	8002f14 <LL_ADC_IsEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	431c      	orrs	r4, r3
 800305c:	4815      	ldr	r0, [pc, #84]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800305e:	f7ff ff59 	bl	8002f14 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	4323      	orrs	r3, r4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d112      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003072:	f023 030f 	bic.w	r3, r3, #15
 8003076:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003078:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800307a:	e009      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800308e:	e000      	b.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003090:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800309a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800309e:	4618      	mov	r0, r3
 80030a0:	377c      	adds	r7, #124	; 0x7c
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	50040000 	.word	0x50040000
 80030ac:	50040100 	.word	0x50040100
 80030b0:	50040300 	.word	0x50040300
 80030b4:	50040200 	.word	0x50040200

080030b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ea:	4a04      	ldr	r2, [pc, #16]	; (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <__NVIC_GetPriorityGrouping+0x18>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 0307 	and.w	r3, r3, #7
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0b      	blt.n	8003146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4907      	ldr	r1, [pc, #28]	; (8003154 <__NVIC_EnableIRQ+0x38>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	; (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	; (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff29 	bl	80030b8 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff3e 	bl	8003100 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff8e 	bl	80031ac <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5d 	bl	8003158 <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff31 	bl	800311c <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e014      	b.n	8003316 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fe f8e7 	bl	80014d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_DAC_Start_DMA+0x1e>
 800333a:	2302      	movs	r3, #2
 800333c:	e09e      	b.n	800347c <HAL_DAC_Start_DMA+0x15c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2202      	movs	r2, #2
 8003348:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12a      	bne.n	80033a6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_DAC_Start_DMA+0x164>)
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a4a      	ldr	r2, [pc, #296]	; (8003488 <HAL_DAC_Start_DMA+0x168>)
 800335e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a49      	ldr	r2, [pc, #292]	; (800348c <HAL_DAC_Start_DMA+0x16c>)
 8003366:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003376:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d009      	beq.n	8003392 <HAL_DAC_Start_DMA+0x72>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d00c      	beq.n	800339c <HAL_DAC_Start_DMA+0x7c>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d000      	beq.n	8003388 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003386:	e039      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3308      	adds	r3, #8
 800338e:	613b      	str	r3, [r7, #16]
        break;
 8003390:	e034      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	330c      	adds	r3, #12
 8003398:	613b      	str	r3, [r7, #16]
        break;
 800339a:	e02f      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3310      	adds	r3, #16
 80033a2:	613b      	str	r3, [r7, #16]
        break;
 80033a4:	e02a      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4a39      	ldr	r2, [pc, #228]	; (8003490 <HAL_DAC_Start_DMA+0x170>)
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_DAC_Start_DMA+0x174>)
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_DAC_Start_DMA+0x178>)
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033cc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d009      	beq.n	80033e8 <HAL_DAC_Start_DMA+0xc8>
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d00c      	beq.n	80033f2 <HAL_DAC_Start_DMA+0xd2>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d000      	beq.n	80033de <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80033dc:	e00e      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	613b      	str	r3, [r7, #16]
        break;
 80033e6:	e009      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3318      	adds	r3, #24
 80033ee:	613b      	str	r3, [r7, #16]
        break;
 80033f0:	e004      	b.n	80033fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	331c      	adds	r3, #28
 80033f8:	613b      	str	r3, [r7, #16]
        break;
 80033fa:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d111      	bne.n	8003426 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6898      	ldr	r0, [r3, #8]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	f000 faa4 	bl	8003968 <HAL_DMA_Start_IT>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e010      	b.n	8003448 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003434:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68d8      	ldr	r0, [r3, #12]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	f000 fa92 	bl	8003968 <HAL_DMA_Start_IT>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e005      	b.n	800347a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800347a:	7dfb      	ldrb	r3, [r7, #23]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	080036e5 	.word	0x080036e5
 8003488:	08003707 	.word	0x08003707
 800348c:	08003723 	.word	0x08003723
 8003490:	0800378d 	.word	0x0800378d
 8003494:	080037af 	.word	0x080037af
 8003498:	080037cb 	.word	0x080037cb

0800349c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	795b      	ldrb	r3, [r3, #5]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_DAC_ConfigChannel+0x1c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e107      	b.n	80036dc <HAL_DAC_ConfigChannel+0x22c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d174      	bne.n	80035ca <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fa44 	bl	800196c <HAL_GetTick>
 80034e4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d134      	bne.n	8003556 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ec:	e011      	b.n	8003512 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034ee:	f7fe fa3d 	bl	800196c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d90a      	bls.n	8003512 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f043 0208 	orr.w	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2203      	movs	r2, #3
 800350c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0e4      	b.n	80036dc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e6      	bne.n	80034ee <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003520:	2001      	movs	r0, #1
 8003522:	f7fe fa2f 	bl	8001984 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	6992      	ldr	r2, [r2, #24]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
 8003530:	e01e      	b.n	8003570 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003532:	f7fe fa1b 	bl	800196c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d90a      	bls.n	8003556 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f043 0208 	orr.w	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2203      	movs	r2, #3
 8003550:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0c2      	b.n	80036dc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	2b00      	cmp	r3, #0
 800355e:	dbe8      	blt.n	8003532 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003560:	2001      	movs	r0, #1
 8003562:	f7fe fa0f 	bl	8001984 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	6992      	ldr	r2, [r2, #24]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	ea02 0103 	and.w	r1, r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	21ff      	movs	r1, #255	; 0xff
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	ea02 0103 	and.w	r1, r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11d      	bne.n	800360e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	221f      	movs	r2, #31
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2207      	movs	r2, #7
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	431a      	orrs	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	22c0      	movs	r2, #192	; 0xc0
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	400a      	ands	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7fd fcc0 	bl	8001078 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	711a      	strb	r2, [r3, #4]
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7fd fc99 	bl	800104c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fead 	bl	800349c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	711a      	strb	r2, [r3, #4]
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ffd8 	bl	8003750 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	711a      	strb	r2, [r3, #4]
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ffd1 	bl	8003764 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ffc7 	bl	8003778 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	711a      	strb	r2, [r3, #4]
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e098      	b.n	800393c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4b4d      	ldr	r3, [pc, #308]	; (8003948 <HAL_DMA_Init+0x150>)
 8003812:	429a      	cmp	r2, r3
 8003814:	d80f      	bhi.n	8003836 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_DMA_Init+0x154>)
 800381e:	4413      	add	r3, r2
 8003820:	4a4b      	ldr	r2, [pc, #300]	; (8003950 <HAL_DMA_Init+0x158>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	009a      	lsls	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_DMA_Init+0x15c>)
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
 8003834:	e00e      	b.n	8003854 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_DMA_Init+0x160>)
 800383e:	4413      	add	r3, r2
 8003840:	4a43      	ldr	r2, [pc, #268]	; (8003950 <HAL_DMA_Init+0x158>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a42      	ldr	r2, [pc, #264]	; (800395c <HAL_DMA_Init+0x164>)
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ae:	d039      	beq.n	8003924 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <HAL_DMA_Init+0x15c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d11a      	bne.n	80038f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ba:	4b29      	ldr	r3, [pc, #164]	; (8003960 <HAL_DMA_Init+0x168>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f003 031c 	and.w	r3, r3, #28
 80038c6:	210f      	movs	r1, #15
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4924      	ldr	r1, [pc, #144]	; (8003960 <HAL_DMA_Init+0x168>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_DMA_Init+0x168>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 031c 	and.w	r3, r3, #28
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	491d      	ldr	r1, [pc, #116]	; (8003960 <HAL_DMA_Init+0x168>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
 80038ee:	e019      	b.n	8003924 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038f0:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_DMA_Init+0x16c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 031c 	and.w	r3, r3, #28
 80038fc:	210f      	movs	r1, #15
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	4917      	ldr	r1, [pc, #92]	; (8003964 <HAL_DMA_Init+0x16c>)
 8003906:	4013      	ands	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_DMA_Init+0x16c>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f003 031c 	and.w	r3, r3, #28
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	4911      	ldr	r1, [pc, #68]	; (8003964 <HAL_DMA_Init+0x16c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40020407 	.word	0x40020407
 800394c:	bffdfff8 	.word	0xbffdfff8
 8003950:	cccccccd 	.word	0xcccccccd
 8003954:	40020000 	.word	0x40020000
 8003958:	bffdfbf8 	.word	0xbffdfbf8
 800395c:	40020400 	.word	0x40020400
 8003960:	400200a8 	.word	0x400200a8
 8003964:	400204a8 	.word	0x400204a8

08003968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_DMA_Start_IT+0x20>
 8003984:	2302      	movs	r3, #2
 8003986:	e04b      	b.n	8003a20 <HAL_DMA_Start_IT+0xb8>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d13a      	bne.n	8003a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8e0 	bl	8003b86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 020e 	orr.w	r2, r2, #14
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e00f      	b.n	8003a00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 020a 	orr.w	r2, r2, #10
 80039fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e005      	b.n	8003a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f003 031c 	and.w	r3, r3, #28
 8003a48:	2204      	movs	r2, #4
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d026      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x7a>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d021      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 021c 	and.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2104      	movs	r1, #4
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d071      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	e06c      	b.n	8003b7c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f003 031c 	and.w	r3, r3, #28
 8003aaa:	2202      	movs	r2, #2
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02e      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xec>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d029      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 020a 	bic.w	r2, r2, #10
 8003adc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 021c 	and.w	r2, r3, #28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2102      	movs	r1, #2
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d038      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b12:	e033      	b.n	8003b7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f003 031c 	and.w	r3, r3, #28
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02a      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x156>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d025      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020e 	bic.w	r2, r2, #14
 8003b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f003 021c 	and.w	r2, r3, #28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
}
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f003 021c 	and.w	r2, r3, #28
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d108      	bne.n	8003bca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bc8:	e007      	b.n	8003bda <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	60da      	str	r2, [r3, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf6:	e17f      	b.n	8003ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8171 	beq.w	8003ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d00b      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d007      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c24:	2b11      	cmp	r3, #17
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b12      	cmp	r3, #18
 8003c2e:	d130      	bne.n	8003c92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c66:	2201      	movs	r2, #1
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0201 	and.w	r2, r3, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d118      	bne.n	8003cd0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f003 0201 	and.w	r2, r3, #1
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2203      	movs	r2, #3
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x128>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d123      	bne.n	8003d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3208      	adds	r2, #8
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0203 	and.w	r2, r3, #3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80ac 	beq.w	8003ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9a:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <HAL_GPIO_Init+0x32c>)
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9e:	4a5d      	ldr	r2, [pc, #372]	; (8003f14 <HAL_GPIO_Init+0x32c>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6613      	str	r3, [r2, #96]	; 0x60
 8003da6:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <HAL_GPIO_Init+0x32c>)
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003db2:	4a59      	ldr	r2, [pc, #356]	; (8003f18 <HAL_GPIO_Init+0x330>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ddc:	d025      	beq.n	8003e2a <HAL_GPIO_Init+0x242>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4e      	ldr	r2, [pc, #312]	; (8003f1c <HAL_GPIO_Init+0x334>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01f      	beq.n	8003e26 <HAL_GPIO_Init+0x23e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4d      	ldr	r2, [pc, #308]	; (8003f20 <HAL_GPIO_Init+0x338>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d019      	beq.n	8003e22 <HAL_GPIO_Init+0x23a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_GPIO_Init+0x33c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_GPIO_Init+0x236>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_GPIO_Init+0x340>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00d      	beq.n	8003e1a <HAL_GPIO_Init+0x232>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_GPIO_Init+0x344>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <HAL_GPIO_Init+0x22e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a49      	ldr	r2, [pc, #292]	; (8003f30 <HAL_GPIO_Init+0x348>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_GPIO_Init+0x22a>
 8003e0e:	2306      	movs	r3, #6
 8003e10:	e00c      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e12:	2307      	movs	r3, #7
 8003e14:	e00a      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e16:	2305      	movs	r3, #5
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e3c:	4936      	ldr	r1, [pc, #216]	; (8003f18 <HAL_GPIO_Init+0x330>)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6e:	4a31      	ldr	r2, [pc, #196]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e74:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e98:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eec:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_GPIO_Init+0x34c>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f ae78 	bne.w	8003bf8 <HAL_GPIO_Init+0x10>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000c00 	.word	0x48000c00
 8003f28:	48001000 	.word	0x48001000
 8003f2c:	48001400 	.word	0x48001400
 8003f30:	48001800 	.word	0x48001800
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f46:	e0cd      	b.n	80040e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80c0 	beq.w	80040de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f5e:	4a68      	ldr	r2, [pc, #416]	; (8004100 <HAL_GPIO_DeInit+0x1c8>)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f86:	d025      	beq.n	8003fd4 <HAL_GPIO_DeInit+0x9c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <HAL_GPIO_DeInit+0x1cc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01f      	beq.n	8003fd0 <HAL_GPIO_DeInit+0x98>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a5d      	ldr	r2, [pc, #372]	; (8004108 <HAL_GPIO_DeInit+0x1d0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d019      	beq.n	8003fcc <HAL_GPIO_DeInit+0x94>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a5c      	ldr	r2, [pc, #368]	; (800410c <HAL_GPIO_DeInit+0x1d4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_GPIO_DeInit+0x90>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a5b      	ldr	r2, [pc, #364]	; (8004110 <HAL_GPIO_DeInit+0x1d8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_GPIO_DeInit+0x8c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a5a      	ldr	r2, [pc, #360]	; (8004114 <HAL_GPIO_DeInit+0x1dc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <HAL_GPIO_DeInit+0x88>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_GPIO_DeInit+0x1e0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_GPIO_DeInit+0x84>
 8003fb8:	2306      	movs	r3, #6
 8003fba:	e00c      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	e00a      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fc0:	2305      	movs	r3, #5
 8003fc2:	e008      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e006      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e004      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e002      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_GPIO_DeInit+0x9e>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	f002 0203 	and.w	r2, r2, #3
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	4093      	lsls	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d132      	bne.n	800404c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003fe6:	4b4d      	ldr	r3, [pc, #308]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	494b      	ldr	r1, [pc, #300]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	4947      	ldr	r1, [pc, #284]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004002:	4b46      	ldr	r3, [pc, #280]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	4944      	ldr	r1, [pc, #272]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 800400c:	4013      	ands	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	4940      	ldr	r1, [pc, #256]	; (800411c <HAL_GPIO_DeInit+0x1e4>)
 800401a:	4013      	ands	r3, r2
 800401c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800402e:	4a34      	ldr	r2, [pc, #208]	; (8004100 <HAL_GPIO_DeInit+0x1c8>)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43da      	mvns	r2, r3
 800403e:	4830      	ldr	r0, [pc, #192]	; (8004100 <HAL_GPIO_DeInit+0x1c8>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	400a      	ands	r2, r1
 8004046:	3302      	adds	r3, #2
 8004048:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2103      	movs	r1, #3
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	08d2      	lsrs	r2, r2, #3
 8004080:	4019      	ands	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3208      	adds	r2, #8
 8004086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2103      	movs	r1, #3
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	2101      	movs	r1, #1
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2103      	movs	r1, #3
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	2101      	movs	r1, #1
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f af2b 	bne.w	8003f48 <HAL_GPIO_DeInit+0x10>
  }
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	48000400 	.word	0x48000400
 8004108:	48000800 	.word	0x48000800
 800410c:	48000c00 	.word	0x48000c00
 8004110:	48001000 	.word	0x48001000
 8004114:	48001400 	.word	0x48001400
 8004118:	48001800 	.word	0x48001800
 800411c:	40010400 	.word	0x40010400

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800413c:	e002      	b.n	8004144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f806 	bl	8004180 <HAL_GPIO_EXTI_Callback>
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e081      	b.n	80042ac <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fd f9f3 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800421c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d104      	bne.n	8004230 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800422e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004252:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	ea42 0103 	orr.w	r1, r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69d9      	ldr	r1, [r3, #28]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e021      	b.n	800430a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2224      	movs	r2, #36	; 0x24
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd f9a6 	bl	8001630 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	461a      	mov	r2, r3
 8004322:	4603      	mov	r3, r0
 8004324:	817b      	strh	r3, [r7, #10]
 8004326:	460b      	mov	r3, r1
 8004328:	813b      	strh	r3, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	f040 80f9 	bne.w	800452e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_I2C_Mem_Write+0x34>
 8004342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0ed      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_I2C_Mem_Write+0x4e>
 800435e:	2302      	movs	r3, #2
 8004360:	e0e6      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800436a:	f7fd faff 	bl	800196c <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fac3 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0d1      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2221      	movs	r2, #33	; 0x21
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b4:	88f8      	ldrh	r0, [r7, #6]
 80043b6:	893a      	ldrh	r2, [r7, #8]
 80043b8:	8979      	ldrh	r1, [r7, #10]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4603      	mov	r3, r0
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f9d3 	bl	8004770 <I2C_RequestMemoryWrite>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0a9      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2bff      	cmp	r3, #255	; 0xff
 80043e4:	d90e      	bls.n	8004404 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fba5 	bl	8004b4c <I2C_TransferConfig>
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	2300      	movs	r3, #0
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb94 	bl	8004b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 faad 	bl	8004988 <I2C_WaitOnTXISFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e07b      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	781a      	ldrb	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d034      	beq.n	80044dc <HAL_I2C_Mem_Write+0x1c8>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d130      	bne.n	80044dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	2200      	movs	r2, #0
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fa3f 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e04d      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	d90e      	bls.n	80044bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	22ff      	movs	r2, #255	; 0xff
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	8979      	ldrh	r1, [r7, #10]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fb49 	bl	8004b4c <I2C_TransferConfig>
 80044ba:	e00f      	b.n	80044dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	8979      	ldrh	r1, [r7, #10]
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fb38 	bl	8004b4c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d19e      	bne.n	8004424 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa8c 	bl	8004a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e01a      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2220      	movs	r2, #32
 8004500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_I2C_Mem_Write+0x224>)
 800450e:	400b      	ands	r3, r1
 8004510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	fe00e800 	.word	0xfe00e800

0800453c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	f040 80fd 	bne.w	800475e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_I2C_Mem_Read+0x34>
 800456a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0f1      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_I2C_Mem_Read+0x4e>
 8004586:	2302      	movs	r3, #2
 8004588:	e0ea      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004592:	f7fd f9eb 	bl	800196c <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	2319      	movs	r3, #25
 800459e:	2201      	movs	r2, #1
 80045a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f9af 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0d5      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2222      	movs	r2, #34	; 0x22
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045dc:	88f8      	ldrh	r0, [r7, #6]
 80045de:	893a      	ldrh	r2, [r7, #8]
 80045e0:	8979      	ldrh	r1, [r7, #10]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4603      	mov	r3, r0
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f913 	bl	8004818 <I2C_RequestMemoryRead>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0ad      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2bff      	cmp	r3, #255	; 0xff
 800460c:	d90e      	bls.n	800462c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	b2da      	uxtb	r2, r3
 800461a:	8979      	ldrh	r1, [r7, #10]
 800461c:	4b52      	ldr	r3, [pc, #328]	; (8004768 <HAL_I2C_Mem_Read+0x22c>)
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fa91 	bl	8004b4c <I2C_TransferConfig>
 800462a:	e00f      	b.n	800464c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	b2da      	uxtb	r2, r3
 800463c:	8979      	ldrh	r1, [r7, #10]
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_I2C_Mem_Read+0x22c>)
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fa80 	bl	8004b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	2200      	movs	r2, #0
 8004654:	2104      	movs	r1, #4
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f956 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07c      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d034      	beq.n	800470c <HAL_I2C_Mem_Read+0x1d0>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d130      	bne.n	800470c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f927 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04d      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2bff      	cmp	r3, #255	; 0xff
 80046cc:	d90e      	bls.n	80046ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	22ff      	movs	r2, #255	; 0xff
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	8979      	ldrh	r1, [r7, #10]
 80046dc:	2300      	movs	r3, #0
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fa31 	bl	8004b4c <I2C_TransferConfig>
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	2300      	movs	r3, #0
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa20 	bl	8004b4c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d19a      	bne.n	800464c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f974 	bl	8004a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01a      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_I2C_Mem_Read+0x230>)
 800473e:	400b      	ands	r3, r1
 8004740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	80002400 	.word	0x80002400
 800476c:	fe00e800 	.word	0xfe00e800

08004770 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	8979      	ldrh	r1, [r7, #10]
 8004790:	4b20      	ldr	r3, [pc, #128]	; (8004814 <I2C_RequestMemoryWrite+0xa4>)
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f9d7 	bl	8004b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f8f0 	bl	8004988 <I2C_WaitOnTXISFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e02c      	b.n	800480c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047b8:	893b      	ldrh	r3, [r7, #8]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
 80047c2:	e015      	b.n	80047f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047c4:	893b      	ldrh	r3, [r7, #8]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	69b9      	ldr	r1, [r7, #24]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8d6 	bl	8004988 <I2C_WaitOnTXISFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e012      	b.n	800480c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047e6:	893b      	ldrh	r3, [r7, #8]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2200      	movs	r2, #0
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f884 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	80002000 	.word	0x80002000

08004818 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	8979      	ldrh	r1, [r7, #10]
 8004838:	4b20      	ldr	r3, [pc, #128]	; (80048bc <I2C_RequestMemoryRead+0xa4>)
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f984 	bl	8004b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f89d 	bl	8004988 <I2C_WaitOnTXISFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e02c      	b.n	80048b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800485e:	893b      	ldrh	r3, [r7, #8]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
 8004868:	e015      	b.n	8004896 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800486a:	893b      	ldrh	r3, [r7, #8]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	b29b      	uxth	r3, r3
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	69b9      	ldr	r1, [r7, #24]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f883 	bl	8004988 <I2C_WaitOnTXISFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e012      	b.n	80048b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2200      	movs	r2, #0
 800489e:	2140      	movs	r1, #64	; 0x40
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f831 	bl	8004908 <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	80002000 	.word	0x80002000

080048c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d103      	bne.n	80048de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d007      	beq.n	80048fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	619a      	str	r2, [r3, #24]
  }
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004918:	e022      	b.n	8004960 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d01e      	beq.n	8004960 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fd f823 	bl	800196c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e00f      	b.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	429a      	cmp	r2, r3
 800497c:	d0cd      	beq.n	800491a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004994:	e02c      	b.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f870 	bl	8004a80 <I2C_IsAcknowledgeFailed>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e02a      	b.n	8004a00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d01e      	beq.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fc ffdb 	bl	800196c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d113      	bne.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e007      	b.n	8004a00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d1cb      	bne.n	8004996 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a14:	e028      	b.n	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f830 	bl	8004a80 <I2C_IsAcknowledgeFailed>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e026      	b.n	8004a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fc ff9f 	bl	800196c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d1cf      	bne.n	8004a16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d151      	bne.n	8004b3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a9a:	e022      	b.n	8004ae2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d01e      	beq.n	8004ae2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fc ff62 	bl	800196c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_IsAcknowledgeFailed+0x3a>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d113      	bne.n	8004ae2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02e      	b.n	8004b40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d1d5      	bne.n	8004a9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2210      	movs	r2, #16
 8004af6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2220      	movs	r2, #32
 8004afe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fedd 	bl	80048c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <I2C_IsAcknowledgeFailed+0xc8>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f043 0204 	orr.w	r2, r3, #4
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	fe00e800 	.word	0xfe00e800

08004b4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	0d5b      	lsrs	r3, r3, #21
 8004b68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <I2C_TransferConfig+0x58>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	43db      	mvns	r3, r3
 8004b72:	ea02 0103 	and.w	r1, r2, r3
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b7c:	7a7b      	ldrb	r3, [r7, #9]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004b96:	bf00      	nop
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	03ff63ff 	.word	0x03ff63ff

08004ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d138      	bne.n	8004c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e032      	b.n	8004c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2224      	movs	r2, #36	; 0x24
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d139      	bne.n	8004cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e033      	b.n	8004cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2224      	movs	r2, #36	; 0x24
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40007000 	.word	0x40007000

08004cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d130      	bne.n	8004d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d04:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d038      	beq.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2232      	movs	r2, #50	; 0x32
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0c9b      	lsrs	r3, r3, #18
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d38:	e002      	b.n	8004d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4c:	d102      	bne.n	8004d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f2      	bne.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d110      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e00f      	b.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d72:	d007      	beq.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d7c:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40007000 	.word	0x40007000
 8004d98:	20000034 	.word	0x20000034
 8004d9c:	431bde83 	.word	0x431bde83

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e3d4      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db2:	4ba1      	ldr	r3, [pc, #644]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80e4 	beq.w	8004f9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_RCC_OscConfig+0x4a>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	f040 808b 	bne.w	8004ef8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	f040 8087 	bne.w	8004ef8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dea:	4b93      	ldr	r3, [pc, #588]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCC_OscConfig+0x62>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e3ac      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	4b8c      	ldr	r3, [pc, #560]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <HAL_RCC_OscConfig+0x7c>
 8004e12:	4b89      	ldr	r3, [pc, #548]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1a:	e005      	b.n	8004e28 <HAL_RCC_OscConfig+0x88>
 8004e1c:	4b86      	ldr	r3, [pc, #536]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d223      	bcs.n	8004e74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fd3f 	bl	80058b4 <RCC_SetFlashLatencyFromMSIRange>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e38d      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e40:	4b7d      	ldr	r3, [pc, #500]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7c      	ldr	r2, [pc, #496]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e46:	f043 0308 	orr.w	r3, r3, #8
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b7a      	ldr	r3, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	4977      	ldr	r1, [pc, #476]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	4972      	ldr	r1, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]
 8004e72:	e025      	b.n	8004ec0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e74:	4b70      	ldr	r3, [pc, #448]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6f      	ldr	r2, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e7a:	f043 0308 	orr.w	r3, r3, #8
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	496a      	ldr	r1, [pc, #424]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e92:	4b69      	ldr	r3, [pc, #420]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	4965      	ldr	r1, [pc, #404]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fcff 	bl	80058b4 <RCC_SetFlashLatencyFromMSIRange>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e34d      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ec0:	f000 fc36 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	4a5a      	ldr	r2, [pc, #360]	; (800503c <HAL_RCC_OscConfig+0x29c>)
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8004edc:	4a58      	ldr	r2, [pc, #352]	; (8005040 <HAL_RCC_OscConfig+0x2a0>)
 8004ede:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ee0:	4b58      	ldr	r3, [pc, #352]	; (8005044 <HAL_RCC_OscConfig+0x2a4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fc fcf1 	bl	80018cc <HAL_InitTick>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d052      	beq.n	8004f9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	e331      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d032      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f00:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a4c      	ldr	r2, [pc, #304]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc fd2e 	bl	800196c <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f14:	f7fc fd2a 	bl	800196c <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e31a      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f26:	4b44      	ldr	r3, [pc, #272]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f38:	f043 0308 	orr.w	r3, r3, #8
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	493b      	ldr	r1, [pc, #236]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f50:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	4936      	ldr	r1, [pc, #216]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
 8004f64:	e01a      	b.n	8004f9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a33      	ldr	r2, [pc, #204]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f72:	f7fc fcfb 	bl	800196c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7a:	f7fc fcf7 	bl	800196c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e2e7      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x1da>
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d074      	beq.n	8005092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d005      	beq.n	8004fba <HAL_RCC_OscConfig+0x21a>
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d10e      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d064      	beq.n	8005090 <HAL_RCC_OscConfig+0x2f0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d160      	bne.n	8005090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e2c4      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d106      	bne.n	8004fea <HAL_RCC_OscConfig+0x24a>
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e01d      	b.n	8005026 <HAL_RCC_OscConfig+0x286>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x26e>
 8004ff4:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8004ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e00b      	b.n	8005026 <HAL_RCC_OscConfig+0x286>
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8005014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a06      	ldr	r2, [pc, #24]	; (8005038 <HAL_RCC_OscConfig+0x298>)
 8005020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01c      	beq.n	8005068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc fc9d 	bl	800196c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005034:	e011      	b.n	800505a <HAL_RCC_OscConfig+0x2ba>
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000
 800503c:	0800759c 	.word	0x0800759c
 8005040:	20000034 	.word	0x20000034
 8005044:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fc fc90 	bl	800196c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e280      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505a:	4baf      	ldr	r3, [pc, #700]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x2a8>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc fc80 	bl	800196c <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fc fc7c 	bl	800196c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e26c      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005082:	4ba5      	ldr	r3, [pc, #660]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x2d0>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d060      	beq.n	8005160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0x310>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d119      	bne.n	80050de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d116      	bne.n	80050de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b0:	4b99      	ldr	r3, [pc, #612]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x328>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e249      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	4b93      	ldr	r3, [pc, #588]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	4990      	ldr	r1, [pc, #576]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050dc:	e040      	b.n	8005160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d023      	beq.n	800512e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e6:	4b8c      	ldr	r3, [pc, #560]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a8b      	ldr	r2, [pc, #556]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fc fc3b 	bl	800196c <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fa:	f7fc fc37 	bl	800196c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e227      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510c:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b7f      	ldr	r3, [pc, #508]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	497c      	ldr	r1, [pc, #496]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
 800512c:	e018      	b.n	8005160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a79      	ldr	r2, [pc, #484]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fc fc17 	bl	800196c <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005142:	f7fc fc13 	bl	800196c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e203      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005154:	4b70      	ldr	r3, [pc, #448]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d03c      	beq.n	80051e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01c      	beq.n	80051ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005174:	4b68      	ldr	r3, [pc, #416]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517a:	4a67      	ldr	r2, [pc, #412]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc fbf2 	bl	800196c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fc fbee 	bl	800196c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e1de      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800519e:	4b5e      	ldr	r3, [pc, #376]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ef      	beq.n	800518c <HAL_RCC_OscConfig+0x3ec>
 80051ac:	e01b      	b.n	80051e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ae:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b4:	4a58      	ldr	r2, [pc, #352]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fc fbd5 	bl	800196c <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c6:	f7fc fbd1 	bl	800196c <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e1c1      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d8:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ef      	bne.n	80051c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80a6 	beq.w	8005340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051f8:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10d      	bne.n	8005220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	4b44      	ldr	r3, [pc, #272]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	4a43      	ldr	r2, [pc, #268]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6593      	str	r3, [r2, #88]	; 0x58
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005220:	4b3e      	ldr	r3, [pc, #248]	; (800531c <HAL_RCC_OscConfig+0x57c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d118      	bne.n	800525e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <HAL_RCC_OscConfig+0x57c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3a      	ldr	r2, [pc, #232]	; (800531c <HAL_RCC_OscConfig+0x57c>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005238:	f7fc fb98 	bl	800196c <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fc fb94 	bl	800196c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e184      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005252:	4b32      	ldr	r3, [pc, #200]	; (800531c <HAL_RCC_OscConfig+0x57c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x4d8>
 8005266:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005276:	e024      	b.n	80052c2 <HAL_RCC_OscConfig+0x522>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b05      	cmp	r3, #5
 800527e:	d110      	bne.n	80052a2 <HAL_RCC_OscConfig+0x502>
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005288:	f043 0304 	orr.w	r3, r3, #4
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052a0:	e00f      	b.n	80052c2 <HAL_RCC_OscConfig+0x522>
 80052a2:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80052ba:	f023 0304 	bic.w	r3, r3, #4
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc fb4f 	bl	800196c <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fc fb4b 	bl	800196c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e139      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_OscConfig+0x578>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ed      	beq.n	80052d2 <HAL_RCC_OscConfig+0x532>
 80052f6:	e01a      	b.n	800532e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc fb38 	bl	800196c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052fe:	e00f      	b.n	8005320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fc fb34 	bl	800196c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d906      	bls.n	8005320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e122      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005320:	4b90      	ldr	r3, [pc, #576]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e8      	bne.n	8005300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532e:	7ffb      	ldrb	r3, [r7, #31]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b8b      	ldr	r3, [pc, #556]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4a8a      	ldr	r2, [pc, #552]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8108 	beq.w	800555a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	2b02      	cmp	r3, #2
 8005350:	f040 80d0 	bne.w	80054f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005354:	4b83      	ldr	r3, [pc, #524]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0203 	and.w	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d130      	bne.n	80053ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	3b01      	subs	r3, #1
 8005374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d127      	bne.n	80053ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d11f      	bne.n	80053ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005394:	2a07      	cmp	r2, #7
 8005396:	bf14      	ite	ne
 8005398:	2201      	movne	r2, #1
 800539a:	2200      	moveq	r2, #0
 800539c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800539e:	4293      	cmp	r3, r2
 80053a0:	d113      	bne.n	80053ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	3b01      	subs	r3, #1
 80053b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d06e      	beq.n	80054a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d069      	beq.n	80054a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053dc:	4b61      	ldr	r3, [pc, #388]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0b7      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053ec:	4b5d      	ldr	r3, [pc, #372]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5c      	ldr	r2, [pc, #368]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80053f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053f8:	f7fc fab8 	bl	800196c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005400:	f7fc fab4 	bl	800196c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0a4      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005412:	4b54      	ldr	r3, [pc, #336]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800541e:	4b51      	ldr	r3, [pc, #324]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <HAL_RCC_OscConfig+0x7c8>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800542e:	3a01      	subs	r2, #1
 8005430:	0112      	lsls	r2, r2, #4
 8005432:	4311      	orrs	r1, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005438:	0212      	lsls	r2, r2, #8
 800543a:	4311      	orrs	r1, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005440:	0852      	lsrs	r2, r2, #1
 8005442:	3a01      	subs	r2, #1
 8005444:	0552      	lsls	r2, r2, #21
 8005446:	4311      	orrs	r1, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800544c:	0852      	lsrs	r2, r2, #1
 800544e:	3a01      	subs	r2, #1
 8005450:	0652      	lsls	r2, r2, #25
 8005452:	4311      	orrs	r1, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005458:	0912      	lsrs	r2, r2, #4
 800545a:	0452      	lsls	r2, r2, #17
 800545c:	430a      	orrs	r2, r1
 800545e:	4941      	ldr	r1, [pc, #260]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a3e      	ldr	r2, [pc, #248]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 800546a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005470:	4b3c      	ldr	r3, [pc, #240]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800547c:	f7fc fa76 	bl	800196c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fc fa72 	bl	800196c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e062      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005496:	4b33      	ldr	r3, [pc, #204]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054a2:	e05a      	b.n	800555a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e059      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a8:	4b2e      	ldr	r3, [pc, #184]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d152      	bne.n	800555a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054b4:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054c0:	4b28      	ldr	r3, [pc, #160]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054cc:	f7fc fa4e 	bl	800196c <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc fa4a 	bl	800196c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e03a      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x734>
 80054f2:	e032      	b.n	800555a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d02d      	beq.n	8005556 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fa:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a19      	ldr	r2, [pc, #100]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005504:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005518:	f023 0303 	bic.w	r3, r3, #3
 800551c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 8005524:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fc fa1d 	bl	800196c <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005536:	f7fc fa19 	bl	800196c <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e009      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCC_OscConfig+0x7c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0x796>
 8005554:	e001      	b.n	800555a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	f99d808c 	.word	0xf99d808c

0800556c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0c8      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005580:	4b66      	ldr	r3, [pc, #408]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d910      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b63      	ldr	r3, [pc, #396]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4961      	ldr	r1, [pc, #388]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b5f      	ldr	r3, [pc, #380]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0b0      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d04c      	beq.n	8005656 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d107      	bne.n	80055d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c4:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d121      	bne.n	8005614 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e09e      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d107      	bne.n	80055ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055dc:	4b50      	ldr	r3, [pc, #320]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d115      	bne.n	8005614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e092      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f4:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e086      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005604:	4b46      	ldr	r3, [pc, #280]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e07e      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005614:	4b42      	ldr	r3, [pc, #264]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f023 0203 	bic.w	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	493f      	ldr	r1, [pc, #252]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005626:	f7fc f9a1 	bl	800196c <HAL_GetTick>
 800562a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562c:	e00a      	b.n	8005644 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562e:	f7fc f99d 	bl	800196c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f241 3288 	movw	r2, #5000	; 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e066      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005644:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 020c 	and.w	r2, r3, #12
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	429a      	cmp	r2, r3
 8005654:	d1eb      	bne.n	800562e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005662:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	492c      	ldr	r1, [pc, #176]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 8005670:	4313      	orrs	r3, r2
 8005672:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b29      	ldr	r3, [pc, #164]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d210      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 0207 	bic.w	r2, r3, #7
 800568a:	4924      	ldr	r1, [pc, #144]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b22      	ldr	r3, [pc, #136]	; (800571c <HAL_RCC_ClockConfig+0x1b0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e036      	b.n	8005712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b0:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4918      	ldr	r1, [pc, #96]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ce:	4b14      	ldr	r3, [pc, #80]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4910      	ldr	r1, [pc, #64]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056e2:	f000 f825 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056e6:	4601      	mov	r1, r0
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <HAL_RCC_ClockConfig+0x1b4>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	5cd3      	ldrb	r3, [r2, r3]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	fa21 f303 	lsr.w	r3, r1, r3
 80056fe:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fc f8e0 	bl	80018cc <HAL_InitTick>
 800570c:	4603      	mov	r3, r0
 800570e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005710:	7afb      	ldrb	r3, [r7, #11]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40022000 	.word	0x40022000
 8005720:	40021000 	.word	0x40021000
 8005724:	0800759c 	.word	0x0800759c
 8005728:	20000034 	.word	0x20000034
 800572c:	20000038 	.word	0x20000038

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573e:	4b3d      	ldr	r3, [pc, #244]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005748:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x34>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d121      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11e      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d107      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005770:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e005      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005780:	4b2c      	ldr	r3, [pc, #176]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800578c:	4a2a      	ldr	r2, [pc, #168]	; (8005838 <HAL_RCC_GetSysClockFreq+0x108>)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d102      	bne.n	80057ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057a8:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_RCC_GetSysClockFreq+0x10c>)
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e004      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_RCC_GetSysClockFreq+0x110>)
 80057b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	d133      	bne.n	8005826 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0xa4>
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d003      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0xaa>
 80057d2:	e005      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_RCC_GetSysClockFreq+0x10c>)
 80057d6:	617b      	str	r3, [r7, #20]
      break;
 80057d8:	e005      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_GetSysClockFreq+0x110>)
 80057dc:	617b      	str	r3, [r7, #20]
      break;
 80057de:	e002      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	617b      	str	r3, [r7, #20]
      break;
 80057e4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	3301      	adds	r3, #1
 80057f2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	fb02 f203 	mul.w	r2, r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCC_GetSysClockFreq+0x104>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0e5b      	lsrs	r3, r3, #25
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	3301      	adds	r3, #1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005826:	69bb      	ldr	r3, [r7, #24]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3724      	adds	r7, #36	; 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40021000 	.word	0x40021000
 8005838:	080075b4 	.word	0x080075b4
 800583c:	00f42400 	.word	0x00f42400
 8005840:	007a1200 	.word	0x007a1200

08005844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_RCC_GetHCLKFreq+0x14>)
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000034 	.word	0x20000034

0800585c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005860:	f7ff fff0 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005864:	4601      	mov	r1, r0
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	4a04      	ldr	r2, [pc, #16]	; (8005884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	080075ac 	.word	0x080075ac

08005888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800588c:	f7ff ffda 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005890:	4601      	mov	r1, r0
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0adb      	lsrs	r3, r3, #11
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800589e:	5cd3      	ldrb	r3, [r2, r3]
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000
 80058b0:	080075ac 	.word	0x080075ac

080058b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058c0:	4b2a      	ldr	r3, [pc, #168]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058cc:	f7ff fa04 	bl	8004cd8 <HAL_PWREx_GetVoltageRange>
 80058d0:	6178      	str	r0, [r7, #20]
 80058d2:	e014      	b.n	80058fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d4:	4b25      	ldr	r3, [pc, #148]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	4a24      	ldr	r2, [pc, #144]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058de:	6593      	str	r3, [r2, #88]	; 0x58
 80058e0:	4b22      	ldr	r3, [pc, #136]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058ec:	f7ff f9f4 	bl	8004cd8 <HAL_PWREx_GetVoltageRange>
 80058f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	4a1d      	ldr	r2, [pc, #116]	; (800596c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005904:	d10b      	bne.n	800591e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d919      	bls.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2ba0      	cmp	r3, #160	; 0xa0
 8005910:	d902      	bls.n	8005918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005912:	2302      	movs	r3, #2
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	e013      	b.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005918:	2301      	movs	r3, #1
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e010      	b.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d902      	bls.n	800592a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005924:	2303      	movs	r3, #3
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	e00a      	b.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d102      	bne.n	8005936 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005930:	2302      	movs	r3, #2
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e004      	b.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b70      	cmp	r3, #112	; 0x70
 800593a:	d101      	bne.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800593c:	2301      	movs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f023 0207 	bic.w	r2, r3, #7
 8005948:	4909      	ldr	r1, [pc, #36]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d001      	beq.n	8005962 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40021000 	.word	0x40021000
 8005970:	40022000 	.word	0x40022000

08005974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800597c:	2300      	movs	r3, #0
 800597e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005980:	2300      	movs	r3, #0
 8005982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598c:	2b00      	cmp	r3, #0
 800598e:	d03f      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005998:	d01c      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d802      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80059a4:	e01f      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80059a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059aa:	d003      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80059ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059b0:	d01c      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80059b2:	e018      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059b4:	4b85      	ldr	r3, [pc, #532]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a84      	ldr	r2, [pc, #528]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c0:	e015      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fab9 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3320      	adds	r3, #32
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fba0 	bl	8006120 <RCCEx_PLLSAI2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	74fb      	strb	r3, [r7, #19]
      break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80059ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059f4:	4b75      	ldr	r3, [pc, #468]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a02:	4972      	ldr	r1, [pc, #456]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a0a:	e001      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d03f      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a24:	d01c      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a2a:	d802      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005a30:	e01f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a36:	d003      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a3c:	d01c      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005a3e:	e018      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a40:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a61      	ldr	r2, [pc, #388]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a4c:	e015      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fa73 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a5e:	e00c      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3320      	adds	r3, #32
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fb5a 	bl	8006120 <RCCEx_PLLSAI2_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	74fb      	strb	r3, [r7, #19]
      break;
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a7a:	7cfb      	ldrb	r3, [r7, #19]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a8e:	494f      	ldr	r1, [pc, #316]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a96:	e001      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80a0 	beq.w	8005bea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac4:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad0:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005adc:	2301      	movs	r3, #1
 8005ade:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae0:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a3a      	ldr	r2, [pc, #232]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aec:	f7fb ff3e 	bl	800196c <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005af2:	e009      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fb ff3a 	bl	800196c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d902      	bls.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	74fb      	strb	r3, [r7, #19]
        break;
 8005b06:	e005      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b08:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ef      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005b14:	7cfb      	ldrb	r3, [r7, #19]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d15c      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b1a:	4b2c      	ldr	r3, [pc, #176]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01f      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d019      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b38:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b44:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fb fef9 	bl	800196c <HAL_GetTick>
 8005b7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7c:	e00b      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fb fef5 	bl	800196c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d902      	bls.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	74fb      	strb	r3, [r7, #19]
            break;
 8005b94:	e006      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ec      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bba:	4904      	ldr	r1, [pc, #16]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bc2:	e009      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	74bb      	strb	r3, [r7, #18]
 8005bc8:	e006      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bd8:	7c7b      	ldrb	r3, [r7, #17]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bde:	4b9e      	ldr	r3, [pc, #632]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	4a9d      	ldr	r2, [pc, #628]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf6:	4b98      	ldr	r3, [pc, #608]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f023 0203 	bic.w	r2, r3, #3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	4994      	ldr	r1, [pc, #592]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c18:	4b8f      	ldr	r3, [pc, #572]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f023 020c 	bic.w	r2, r3, #12
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	498c      	ldr	r1, [pc, #560]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c3a:	4b87      	ldr	r3, [pc, #540]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	4983      	ldr	r1, [pc, #524]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c5c:	4b7e      	ldr	r3, [pc, #504]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	497b      	ldr	r1, [pc, #492]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c7e:	4b76      	ldr	r3, [pc, #472]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8c:	4972      	ldr	r1, [pc, #456]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ca0:	4b6d      	ldr	r3, [pc, #436]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	496a      	ldr	r1, [pc, #424]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	4961      	ldr	r1, [pc, #388]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce4:	4b5c      	ldr	r3, [pc, #368]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	4959      	ldr	r1, [pc, #356]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d06:	4b54      	ldr	r3, [pc, #336]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d14:	4950      	ldr	r1, [pc, #320]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d28:	4b4b      	ldr	r3, [pc, #300]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	4948      	ldr	r1, [pc, #288]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d4a:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	493f      	ldr	r1, [pc, #252]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d028      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6c:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7a:	4937      	ldr	r1, [pc, #220]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8a:	d106      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a31      	ldr	r2, [pc, #196]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]
 8005d98:	e011      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da2:	d10c      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f8c8 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d028      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	491f      	ldr	r1, [pc, #124]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de8:	d106      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df4:	60d3      	str	r3, [r2, #12]
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	2101      	movs	r1, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f899 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005e18:	7cfb      	ldrb	r3, [r7, #19]
 8005e1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02b      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	4908      	ldr	r1, [pc, #32]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e46:	d109      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	4a02      	ldr	r2, [pc, #8]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e52:	60d3      	str	r3, [r2, #12]
 8005e54:	e014      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f867 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02f      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e8c:	4b2b      	ldr	r3, [pc, #172]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9a:	4928      	ldr	r1, [pc, #160]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eaa:	d10d      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f844 	bl	8005f40 <RCCEx_PLLSAI1_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ebc:	7cfb      	ldrb	r3, [r7, #19]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005ec2:	7cfb      	ldrb	r3, [r7, #19]
 8005ec4:	74bb      	strb	r3, [r7, #18]
 8005ec6:	e011      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3320      	adds	r3, #32
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f921 	bl	8006120 <RCCEx_PLLSAI2_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ef8:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f06:	490d      	ldr	r1, [pc, #52]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2a:	4904      	ldr	r1, [pc, #16]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f32:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000

08005f40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f4e:	4b73      	ldr	r3, [pc, #460]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f5a:	4b70      	ldr	r3, [pc, #448]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10d      	bne.n	8005f86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f72:	4b6a      	ldr	r3, [pc, #424]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
       ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d044      	beq.n	8006010 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e041      	b.n	8006010 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d00c      	beq.n	8005fae <RCCEx_PLLSAI1_Config+0x6e>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d013      	beq.n	8005fc0 <RCCEx_PLLSAI1_Config+0x80>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d120      	bne.n	8005fde <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f9c:	4b5f      	ldr	r3, [pc, #380]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11d      	bne.n	8005fe4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fac:	e01a      	b.n	8005fe4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fae:	4b5b      	ldr	r3, [pc, #364]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d116      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbe:	e013      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fc0:	4b56      	ldr	r3, [pc, #344]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fcc:	4b53      	ldr	r3, [pc, #332]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fdc:	e006      	b.n	8005fec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e004      	b.n	8005fee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e002      	b.n	8005fee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fec:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	3b01      	subs	r3, #1
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	430b      	orrs	r3, r1
 800600a:	4944      	ldr	r1, [pc, #272]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d17d      	bne.n	8006112 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a40      	ldr	r2, [pc, #256]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 800601c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fca3 	bl	800196c <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006028:	e009      	b.n	800603e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800602a:	f7fb fc9f 	bl	800196c <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d902      	bls.n	800603e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	73fb      	strb	r3, [r7, #15]
        break;
 800603c:	e005      	b.n	800604a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1ef      	bne.n	800602a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d160      	bne.n	8006112 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d111      	bne.n	800607a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006056:	4b31      	ldr	r3, [pc, #196]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6892      	ldr	r2, [r2, #8]
 8006066:	0211      	lsls	r1, r2, #8
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68d2      	ldr	r2, [r2, #12]
 800606c:	0912      	lsrs	r2, r2, #4
 800606e:	0452      	lsls	r2, r2, #17
 8006070:	430a      	orrs	r2, r1
 8006072:	492a      	ldr	r1, [pc, #168]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
 8006078:	e027      	b.n	80060ca <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d112      	bne.n	80060a6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006080:	4b26      	ldr	r3, [pc, #152]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6892      	ldr	r2, [r2, #8]
 8006090:	0211      	lsls	r1, r2, #8
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6912      	ldr	r2, [r2, #16]
 8006096:	0852      	lsrs	r2, r2, #1
 8006098:	3a01      	subs	r2, #1
 800609a:	0552      	lsls	r2, r2, #21
 800609c:	430a      	orrs	r2, r1
 800609e:	491f      	ldr	r1, [pc, #124]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
 80060a4:	e011      	b.n	80060ca <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060a6:	4b1d      	ldr	r3, [pc, #116]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6892      	ldr	r2, [r2, #8]
 80060b6:	0211      	lsls	r1, r2, #8
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6952      	ldr	r2, [r2, #20]
 80060bc:	0852      	lsrs	r2, r2, #1
 80060be:	3a01      	subs	r2, #1
 80060c0:	0652      	lsls	r2, r2, #25
 80060c2:	430a      	orrs	r2, r1
 80060c4:	4915      	ldr	r1, [pc, #84]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d6:	f7fb fc49 	bl	800196c <HAL_GetTick>
 80060da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060dc:	e009      	b.n	80060f2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060de:	f7fb fc45 	bl	800196c <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d902      	bls.n	80060f2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	73fb      	strb	r3, [r7, #15]
          break;
 80060f0:	e005      	b.n	80060fe <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060f2:	4b0a      	ldr	r3, [pc, #40]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0ef      	beq.n	80060de <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	4903      	ldr	r1, [pc, #12]	; (800611c <RCCEx_PLLSAI1_Config+0x1dc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40021000 	.word	0x40021000

08006120 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800612e:	4b68      	ldr	r3, [pc, #416]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d018      	beq.n	800616c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800613a:	4b65      	ldr	r3, [pc, #404]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0203 	and.w	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d10d      	bne.n	8006166 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
       ||
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006152:	4b5f      	ldr	r3, [pc, #380]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
       ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d044      	beq.n	80061f0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
 800616a:	e041      	b.n	80061f0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d00c      	beq.n	800618e <RCCEx_PLLSAI2_Config+0x6e>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d013      	beq.n	80061a0 <RCCEx_PLLSAI2_Config+0x80>
 8006178:	2b01      	cmp	r3, #1
 800617a:	d120      	bne.n	80061be <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800617c:	4b54      	ldr	r3, [pc, #336]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11d      	bne.n	80061c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800618c:	e01a      	b.n	80061c4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800618e:	4b50      	ldr	r3, [pc, #320]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	2b00      	cmp	r3, #0
 8006198:	d116      	bne.n	80061c8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619e:	e013      	b.n	80061c8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061a0:	4b4b      	ldr	r3, [pc, #300]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061ac:	4b48      	ldr	r3, [pc, #288]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061bc:	e006      	b.n	80061cc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
      break;
 80061c2:	e004      	b.n	80061ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061c4:	bf00      	nop
 80061c6:	e002      	b.n	80061ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061d4:	4b3e      	ldr	r3, [pc, #248]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	430b      	orrs	r3, r1
 80061ea:	4939      	ldr	r1, [pc, #228]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d167      	bne.n	80062c6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061f6:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a35      	ldr	r2, [pc, #212]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80061fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006202:	f7fb fbb3 	bl	800196c <HAL_GetTick>
 8006206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006208:	e009      	b.n	800621e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800620a:	f7fb fbaf 	bl	800196c <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d902      	bls.n	800621e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	73fb      	strb	r3, [r7, #15]
        break;
 800621c:	e005      	b.n	800622a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800621e:	4b2c      	ldr	r3, [pc, #176]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1ef      	bne.n	800620a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d14a      	bne.n	80062c6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d111      	bne.n	800625a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006236:	4b26      	ldr	r3, [pc, #152]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800623e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6892      	ldr	r2, [r2, #8]
 8006246:	0211      	lsls	r1, r2, #8
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68d2      	ldr	r2, [r2, #12]
 800624c:	0912      	lsrs	r2, r2, #4
 800624e:	0452      	lsls	r2, r2, #17
 8006250:	430a      	orrs	r2, r1
 8006252:	491f      	ldr	r1, [pc, #124]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006254:	4313      	orrs	r3, r2
 8006256:	614b      	str	r3, [r1, #20]
 8006258:	e011      	b.n	800627e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800625a:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006262:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6892      	ldr	r2, [r2, #8]
 800626a:	0211      	lsls	r1, r2, #8
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6912      	ldr	r2, [r2, #16]
 8006270:	0852      	lsrs	r2, r2, #1
 8006272:	3a01      	subs	r2, #1
 8006274:	0652      	lsls	r2, r2, #25
 8006276:	430a      	orrs	r2, r1
 8006278:	4915      	ldr	r1, [pc, #84]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800627a:	4313      	orrs	r3, r2
 800627c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800627e:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628a:	f7fb fb6f 	bl	800196c <HAL_GetTick>
 800628e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006290:	e009      	b.n	80062a6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006292:	f7fb fb6b 	bl	800196c <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d902      	bls.n	80062a6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
          break;
 80062a4:	e005      	b.n	80062b2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ef      	beq.n	8006292 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	4903      	ldr	r1, [pc, #12]	; (80062d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000

080062d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e049      	b.n	800637a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb f9bc 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f000 fab0 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d001      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e04f      	b.n	800643c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a23      	ldr	r2, [pc, #140]	; (8006448 <HAL_TIM_Base_Start_IT+0xc4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d018      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_TIM_Base_Start_IT+0xc8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <HAL_TIM_Base_Start_IT+0xcc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <HAL_TIM_Base_Start_IT+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_TIM_Base_Start_IT+0xd4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_TIM_Base_Start_IT+0x76>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <HAL_TIM_Base_Start_IT+0xd8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d115      	bne.n	8006426 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <HAL_TIM_Base_Start_IT+0xdc>)
 8006402:	4013      	ands	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b06      	cmp	r3, #6
 800640a:	d015      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0xb4>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006412:	d011      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006424:	e008      	b.n	8006438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e000      	b.n	800643a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0202 	mvn.w	r2, #2
 8006490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9c8 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9ba 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9cb 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0204 	mvn.w	r2, #4
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f99e 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f990 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9a1 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b08      	cmp	r3, #8
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0208 	mvn.w	r2, #8
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f974 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f966 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f977 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0210 	mvn.w	r2, #16
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2208      	movs	r2, #8
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f94a 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f93c 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f94d 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f916 	bl	8006814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 faf8 	bl	8006c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d10e      	bne.n	8006642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d107      	bne.n	8006642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800663a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 faeb 	bl	8006c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d10e      	bne.n	800666e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d107      	bne.n	800666e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8fb 	bl	8006864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b20      	cmp	r3, #32
 800667a:	d10e      	bne.n	800669a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d107      	bne.n	800669a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0220 	mvn.w	r2, #32
 8006692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 faab 	bl	8006bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_ConfigClockSource+0x18>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0a8      	b.n	800680c <HAL_TIM_ConfigClockSource+0x16a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d067      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x124>
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d80b      	bhi.n	8006712 <HAL_TIM_ConfigClockSource+0x70>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d073      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x144>
 80066fe:	2b10      	cmp	r3, #16
 8006700:	d802      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x66>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d06f      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006706:	e078      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006708:	2b20      	cmp	r3, #32
 800670a:	d06c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x144>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d06a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006710:	e073      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006712:	2b70      	cmp	r3, #112	; 0x70
 8006714:	d00d      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x90>
 8006716:	2b70      	cmp	r3, #112	; 0x70
 8006718:	d804      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x82>
 800671a:	2b50      	cmp	r3, #80	; 0x50
 800671c:	d033      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xe4>
 800671e:	2b60      	cmp	r3, #96	; 0x60
 8006720:	d041      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006722:	e06a      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d066      	beq.n	80067f8 <HAL_TIM_ConfigClockSource+0x156>
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672e:	d017      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006730:	e063      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f000 f9ad 	bl	8006aa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006754:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04c      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f000 f996 	bl	8006aa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e039      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 f90a 	bl	80069ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	; 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f963 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 80067a4:	e029      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 f929 	bl	8006a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	; 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f953 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 80067c4:	e019      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 f8ea 	bl	80069ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f943 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 80067e4:	e009      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 f93a 	bl	8006a6a <TIM_ITRx_SetConfig>
        break;
 80067f6:	e000      	b.n	80067fa <HAL_TIM_ConfigClockSource+0x158>
      break;
 80067f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a40      	ldr	r2, [pc, #256]	; (800698c <TIM_Base_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006896:	d00f      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <TIM_Base_SetConfig+0x118>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <TIM_Base_SetConfig+0x11c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a3b      	ldr	r2, [pc, #236]	; (8006998 <TIM_Base_SetConfig+0x120>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a3a      	ldr	r2, [pc, #232]	; (800699c <TIM_Base_SetConfig+0x124>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2f      	ldr	r2, [pc, #188]	; (800698c <TIM_Base_SetConfig+0x114>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01f      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d01b      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <TIM_Base_SetConfig+0x118>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d017      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <TIM_Base_SetConfig+0x11c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <TIM_Base_SetConfig+0x120>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00f      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a29      	ldr	r2, [pc, #164]	; (800699c <TIM_Base_SetConfig+0x124>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00b      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <TIM_Base_SetConfig+0x128>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d007      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <TIM_Base_SetConfig+0x12c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_Base_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <TIM_Base_SetConfig+0x130>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d108      	bne.n	8006924 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a10      	ldr	r2, [pc, #64]	; (800698c <TIM_Base_SetConfig+0x114>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00f      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a12      	ldr	r2, [pc, #72]	; (800699c <TIM_Base_SetConfig+0x124>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00b      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <TIM_Base_SetConfig+0x128>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d007      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a10      	ldr	r2, [pc, #64]	; (80069a4 <TIM_Base_SetConfig+0x12c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_Base_SetConfig+0xf8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <TIM_Base_SetConfig+0x130>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d103      	bne.n	8006978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	615a      	str	r2, [r3, #20]
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	40014800 	.word	0x40014800

080069ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 030a 	bic.w	r3, r3, #10
 80069e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0210 	bic.w	r2, r3, #16
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	031b      	lsls	r3, r3, #12
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f043 0307 	orr.w	r3, r3, #7
 8006a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	609a      	str	r2, [r3, #8]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	021a      	lsls	r2, r3, #8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	609a      	str	r2, [r3, #8]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e068      	b.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a13      	ldr	r2, [pc, #76]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a14      	ldr	r2, [pc, #80]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e040      	b.n	8006cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fa fd36 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	; 0x24
 8006c58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f022 0201 	bic.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f82c 	bl	8006cc8 <UART_SetConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e022      	b.n	8006cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 faaa 	bl	80071dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fb31 	bl	8007320 <UART_CheckIdleState>
 8006cbe:	4603      	mov	r3, r0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006ccc:	b088      	sub	sp, #32
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4bac      	ldr	r3, [pc, #688]	; (8006fa8 <UART_SetConfig+0x2e0>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4aa2      	ldr	r2, [pc, #648]	; (8006fac <UART_SetConfig+0x2e4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a99      	ldr	r2, [pc, #612]	; (8006fb0 <UART_SetConfig+0x2e8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d121      	bne.n	8006d94 <UART_SetConfig+0xcc>
 8006d50:	4b98      	ldr	r3, [pc, #608]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d816      	bhi.n	8006d8c <UART_SetConfig+0xc4>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x9c>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d7b 	.word	0x08006d7b
 8006d70:	08006d87 	.word	0x08006d87
 8006d74:	2301      	movs	r3, #1
 8006d76:	76fb      	strb	r3, [r7, #27]
 8006d78:	e0e8      	b.n	8006f4c <UART_SetConfig+0x284>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	76fb      	strb	r3, [r7, #27]
 8006d7e:	e0e5      	b.n	8006f4c <UART_SetConfig+0x284>
 8006d80:	2304      	movs	r3, #4
 8006d82:	76fb      	strb	r3, [r7, #27]
 8006d84:	e0e2      	b.n	8006f4c <UART_SetConfig+0x284>
 8006d86:	2308      	movs	r3, #8
 8006d88:	76fb      	strb	r3, [r7, #27]
 8006d8a:	e0df      	b.n	8006f4c <UART_SetConfig+0x284>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	76fb      	strb	r3, [r7, #27]
 8006d90:	bf00      	nop
 8006d92:	e0db      	b.n	8006f4c <UART_SetConfig+0x284>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a87      	ldr	r2, [pc, #540]	; (8006fb8 <UART_SetConfig+0x2f0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d134      	bne.n	8006e08 <UART_SetConfig+0x140>
 8006d9e:	4b85      	ldr	r3, [pc, #532]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d829      	bhi.n	8006e00 <UART_SetConfig+0x138>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0xec>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e01 	.word	0x08006e01
 8006dbc:	08006e01 	.word	0x08006e01
 8006dc0:	08006e01 	.word	0x08006e01
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006e01 	.word	0x08006e01
 8006dcc:	08006e01 	.word	0x08006e01
 8006dd0:	08006e01 	.word	0x08006e01
 8006dd4:	08006def 	.word	0x08006def
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006dfb 	.word	0x08006dfb
 8006de8:	2300      	movs	r3, #0
 8006dea:	76fb      	strb	r3, [r7, #27]
 8006dec:	e0ae      	b.n	8006f4c <UART_SetConfig+0x284>
 8006dee:	2302      	movs	r3, #2
 8006df0:	76fb      	strb	r3, [r7, #27]
 8006df2:	e0ab      	b.n	8006f4c <UART_SetConfig+0x284>
 8006df4:	2304      	movs	r3, #4
 8006df6:	76fb      	strb	r3, [r7, #27]
 8006df8:	e0a8      	b.n	8006f4c <UART_SetConfig+0x284>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	76fb      	strb	r3, [r7, #27]
 8006dfe:	e0a5      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e00:	2310      	movs	r3, #16
 8006e02:	76fb      	strb	r3, [r7, #27]
 8006e04:	bf00      	nop
 8006e06:	e0a1      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a6b      	ldr	r2, [pc, #428]	; (8006fbc <UART_SetConfig+0x2f4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d120      	bne.n	8006e54 <UART_SetConfig+0x18c>
 8006e12:	4b68      	ldr	r3, [pc, #416]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d00f      	beq.n	8006e40 <UART_SetConfig+0x178>
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d802      	bhi.n	8006e2a <UART_SetConfig+0x162>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <UART_SetConfig+0x16c>
 8006e28:	e010      	b.n	8006e4c <UART_SetConfig+0x184>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d005      	beq.n	8006e3a <UART_SetConfig+0x172>
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	d009      	beq.n	8006e46 <UART_SetConfig+0x17e>
 8006e32:	e00b      	b.n	8006e4c <UART_SetConfig+0x184>
 8006e34:	2300      	movs	r3, #0
 8006e36:	76fb      	strb	r3, [r7, #27]
 8006e38:	e088      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	76fb      	strb	r3, [r7, #27]
 8006e3e:	e085      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e40:	2304      	movs	r3, #4
 8006e42:	76fb      	strb	r3, [r7, #27]
 8006e44:	e082      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e46:	2308      	movs	r3, #8
 8006e48:	76fb      	strb	r3, [r7, #27]
 8006e4a:	e07f      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	76fb      	strb	r3, [r7, #27]
 8006e50:	bf00      	nop
 8006e52:	e07b      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a59      	ldr	r2, [pc, #356]	; (8006fc0 <UART_SetConfig+0x2f8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d120      	bne.n	8006ea0 <UART_SetConfig+0x1d8>
 8006e5e:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d00f      	beq.n	8006e8c <UART_SetConfig+0x1c4>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d802      	bhi.n	8006e76 <UART_SetConfig+0x1ae>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <UART_SetConfig+0x1b8>
 8006e74:	e010      	b.n	8006e98 <UART_SetConfig+0x1d0>
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d005      	beq.n	8006e86 <UART_SetConfig+0x1be>
 8006e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7c:	d009      	beq.n	8006e92 <UART_SetConfig+0x1ca>
 8006e7e:	e00b      	b.n	8006e98 <UART_SetConfig+0x1d0>
 8006e80:	2300      	movs	r3, #0
 8006e82:	76fb      	strb	r3, [r7, #27]
 8006e84:	e062      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e86:	2302      	movs	r3, #2
 8006e88:	76fb      	strb	r3, [r7, #27]
 8006e8a:	e05f      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	76fb      	strb	r3, [r7, #27]
 8006e90:	e05c      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e92:	2308      	movs	r3, #8
 8006e94:	76fb      	strb	r3, [r7, #27]
 8006e96:	e059      	b.n	8006f4c <UART_SetConfig+0x284>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	76fb      	strb	r3, [r7, #27]
 8006e9c:	bf00      	nop
 8006e9e:	e055      	b.n	8006f4c <UART_SetConfig+0x284>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a47      	ldr	r2, [pc, #284]	; (8006fc4 <UART_SetConfig+0x2fc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d124      	bne.n	8006ef4 <UART_SetConfig+0x22c>
 8006eaa:	4b42      	ldr	r3, [pc, #264]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb8:	d012      	beq.n	8006ee0 <UART_SetConfig+0x218>
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebe:	d802      	bhi.n	8006ec6 <UART_SetConfig+0x1fe>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <UART_SetConfig+0x20c>
 8006ec4:	e012      	b.n	8006eec <UART_SetConfig+0x224>
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eca:	d006      	beq.n	8006eda <UART_SetConfig+0x212>
 8006ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed0:	d009      	beq.n	8006ee6 <UART_SetConfig+0x21e>
 8006ed2:	e00b      	b.n	8006eec <UART_SetConfig+0x224>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	76fb      	strb	r3, [r7, #27]
 8006ed8:	e038      	b.n	8006f4c <UART_SetConfig+0x284>
 8006eda:	2302      	movs	r3, #2
 8006edc:	76fb      	strb	r3, [r7, #27]
 8006ede:	e035      	b.n	8006f4c <UART_SetConfig+0x284>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	76fb      	strb	r3, [r7, #27]
 8006ee4:	e032      	b.n	8006f4c <UART_SetConfig+0x284>
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	76fb      	strb	r3, [r7, #27]
 8006eea:	e02f      	b.n	8006f4c <UART_SetConfig+0x284>
 8006eec:	2310      	movs	r3, #16
 8006eee:	76fb      	strb	r3, [r7, #27]
 8006ef0:	bf00      	nop
 8006ef2:	e02b      	b.n	8006f4c <UART_SetConfig+0x284>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <UART_SetConfig+0x2e4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d124      	bne.n	8006f48 <UART_SetConfig+0x280>
 8006efe:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <UART_SetConfig+0x2ec>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0c:	d012      	beq.n	8006f34 <UART_SetConfig+0x26c>
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d802      	bhi.n	8006f1a <UART_SetConfig+0x252>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <UART_SetConfig+0x260>
 8006f18:	e012      	b.n	8006f40 <UART_SetConfig+0x278>
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1e:	d006      	beq.n	8006f2e <UART_SetConfig+0x266>
 8006f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f24:	d009      	beq.n	8006f3a <UART_SetConfig+0x272>
 8006f26:	e00b      	b.n	8006f40 <UART_SetConfig+0x278>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	76fb      	strb	r3, [r7, #27]
 8006f2c:	e00e      	b.n	8006f4c <UART_SetConfig+0x284>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	76fb      	strb	r3, [r7, #27]
 8006f32:	e00b      	b.n	8006f4c <UART_SetConfig+0x284>
 8006f34:	2304      	movs	r3, #4
 8006f36:	76fb      	strb	r3, [r7, #27]
 8006f38:	e008      	b.n	8006f4c <UART_SetConfig+0x284>
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	76fb      	strb	r3, [r7, #27]
 8006f3e:	e005      	b.n	8006f4c <UART_SetConfig+0x284>
 8006f40:	2310      	movs	r3, #16
 8006f42:	76fb      	strb	r3, [r7, #27]
 8006f44:	bf00      	nop
 8006f46:	e001      	b.n	8006f4c <UART_SetConfig+0x284>
 8006f48:	2310      	movs	r3, #16
 8006f4a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a16      	ldr	r2, [pc, #88]	; (8006fac <UART_SetConfig+0x2e4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	f040 8087 	bne.w	8007066 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f58:	7efb      	ldrb	r3, [r7, #27]
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d836      	bhi.n	8006fcc <UART_SetConfig+0x304>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x29c>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006fcd 	.word	0x08006fcd
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006fcd 	.word	0x08006fcd
 8006f74:	08006f97 	.word	0x08006f97
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006fcd 	.word	0x08006fcd
 8006f84:	08006f9f 	.word	0x08006f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f88:	f7fe fc68 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 8006f8c:	6178      	str	r0, [r7, #20]
        break;
 8006f8e:	e022      	b.n	8006fd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <UART_SetConfig+0x300>)
 8006f92:	617b      	str	r3, [r7, #20]
        break;
 8006f94:	e01f      	b.n	8006fd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fe fbcb 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8006f9a:	6178      	str	r0, [r7, #20]
        break;
 8006f9c:	e01b      	b.n	8006fd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	617b      	str	r3, [r7, #20]
        break;
 8006fa4:	e017      	b.n	8006fd6 <UART_SetConfig+0x30e>
 8006fa6:	bf00      	nop
 8006fa8:	efff69f3 	.word	0xefff69f3
 8006fac:	40008000 	.word	0x40008000
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40004400 	.word	0x40004400
 8006fbc:	40004800 	.word	0x40004800
 8006fc0:	40004c00 	.word	0x40004c00
 8006fc4:	40005000 	.word	0x40005000
 8006fc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	76bb      	strb	r3, [r7, #26]
        break;
 8006fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80f1 	beq.w	80071c0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d305      	bcc.n	8006ffa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d902      	bls.n	8007000 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	76bb      	strb	r3, [r7, #26]
 8006ffe:	e0df      	b.n	80071c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	f04f 0400 	mov.w	r4, #0
 8007010:	0214      	lsls	r4, r2, #8
 8007012:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007016:	020b      	lsls	r3, r1, #8
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6852      	ldr	r2, [r2, #4]
 800701c:	0852      	lsrs	r2, r2, #1
 800701e:	4611      	mov	r1, r2
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	eb13 0b01 	adds.w	fp, r3, r1
 8007028:	eb44 0c02 	adc.w	ip, r4, r2
 800702c:	4658      	mov	r0, fp
 800702e:	4661      	mov	r1, ip
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f04f 0400 	mov.w	r4, #0
 8007038:	461a      	mov	r2, r3
 800703a:	4623      	mov	r3, r4
 800703c:	f7f9 f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8007040:	4603      	mov	r3, r0
 8007042:	460c      	mov	r4, r1
 8007044:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800704c:	d308      	bcc.n	8007060 <UART_SetConfig+0x398>
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007054:	d204      	bcs.n	8007060 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	e0af      	b.n	80071c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	76bb      	strb	r3, [r7, #26]
 8007064:	e0ac      	b.n	80071c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800706e:	d15b      	bne.n	8007128 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007070:	7efb      	ldrb	r3, [r7, #27]
 8007072:	2b08      	cmp	r3, #8
 8007074:	d827      	bhi.n	80070c6 <UART_SetConfig+0x3fe>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x3b4>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fe fbdc 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 80070a4:	6178      	str	r0, [r7, #20]
        break;
 80070a6:	e013      	b.n	80070d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fe fbee 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 80070ac:	6178      	str	r0, [r7, #20]
        break;
 80070ae:	e00f      	b.n	80070d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b49      	ldr	r3, [pc, #292]	; (80071d8 <UART_SetConfig+0x510>)
 80070b2:	617b      	str	r3, [r7, #20]
        break;
 80070b4:	e00c      	b.n	80070d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fe fb3b 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80070ba:	6178      	str	r0, [r7, #20]
        break;
 80070bc:	e008      	b.n	80070d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	617b      	str	r3, [r7, #20]
        break;
 80070c4:	e004      	b.n	80070d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	76bb      	strb	r3, [r7, #26]
        break;
 80070ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d074      	beq.n	80071c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	005a      	lsls	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d916      	bls.n	8007122 <UART_SetConfig+0x45a>
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fa:	d212      	bcs.n	8007122 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f023 030f 	bic.w	r3, r3, #15
 8007104:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	b29a      	uxth	r2, r3
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	4313      	orrs	r3, r2
 8007116:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	89fa      	ldrh	r2, [r7, #14]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	e04e      	b.n	80071c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	76bb      	strb	r3, [r7, #26]
 8007126:	e04b      	b.n	80071c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007128:	7efb      	ldrb	r3, [r7, #27]
 800712a:	2b08      	cmp	r3, #8
 800712c:	d827      	bhi.n	800717e <UART_SetConfig+0x4b6>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <UART_SetConfig+0x46c>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007159 	.word	0x08007159
 8007138:	08007161 	.word	0x08007161
 800713c:	08007169 	.word	0x08007169
 8007140:	0800717f 	.word	0x0800717f
 8007144:	0800716f 	.word	0x0800716f
 8007148:	0800717f 	.word	0x0800717f
 800714c:	0800717f 	.word	0x0800717f
 8007150:	0800717f 	.word	0x0800717f
 8007154:	08007177 	.word	0x08007177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fe fb80 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 800715c:	6178      	str	r0, [r7, #20]
        break;
 800715e:	e013      	b.n	8007188 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007160:	f7fe fb92 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 8007164:	6178      	str	r0, [r7, #20]
        break;
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007168:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <UART_SetConfig+0x510>)
 800716a:	617b      	str	r3, [r7, #20]
        break;
 800716c:	e00c      	b.n	8007188 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716e:	f7fe fadf 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8007172:	6178      	str	r0, [r7, #20]
        break;
 8007174:	e008      	b.n	8007188 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717a:	617b      	str	r3, [r7, #20]
        break;
 800717c:	e004      	b.n	8007188 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	76bb      	strb	r3, [r7, #26]
        break;
 8007186:	bf00      	nop
    }

    if (pclk != 0U)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	085a      	lsrs	r2, r3, #1
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	441a      	add	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d908      	bls.n	80071bc <UART_SetConfig+0x4f4>
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d204      	bcs.n	80071bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	e001      	b.n	80071c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80071cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3720      	adds	r7, #32
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80071d8:	00f42400 	.word	0x00f42400

080071dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072da:	d10a      	bne.n	80072f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800732e:	f7fa fb1d 	bl	800196c <HAL_GetTick>
 8007332:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b08      	cmp	r3, #8
 8007340:	d10e      	bne.n	8007360 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007342:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f82a 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e020      	b.n	80073a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b04      	cmp	r3, #4
 800736c:	d10e      	bne.n	800738c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f814 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e00a      	b.n	80073a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ba:	e05d      	b.n	8007478 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d059      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c4:	f7fa fad2 	bl	800196c <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d302      	bcc.n	80073da <UART_WaitOnFlagUntilTimeout+0x30>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d11b      	bne.n	8007412 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0201 	bic.w	r2, r2, #1
 80073f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e042      	b.n	8007498 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02b      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742e:	d123      	bne.n	8007478 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007438:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007448:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e00f      	b.n	8007498 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69da      	ldr	r2, [r3, #28]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d092      	beq.n	80073bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <arm_sin_f32>:
 80074a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007520 <arm_sin_f32+0x80>
 80074a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80074a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80074b4:	d504      	bpl.n	80074c0 <arm_sin_f32+0x20>
 80074b6:	ee17 3a90 	vmov	r3, s15
 80074ba:	3b01      	subs	r3, #1
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007524 <arm_sin_f32+0x84>
 80074c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80074cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80074d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80074d4:	ee17 3a90 	vmov	r3, s15
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074de:	d21a      	bcs.n	8007516 <arm_sin_f32+0x76>
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e8:	1c59      	adds	r1, r3, #1
 80074ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80074ee:	4a0e      	ldr	r2, [pc, #56]	; (8007528 <arm_sin_f32+0x88>)
 80074f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80074f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80074fc:	ed93 7a00 	vldr	s14, [r3]
 8007500:	edd2 6a00 	vldr	s13, [r2]
 8007504:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007508:	ee20 0a26 	vmul.f32	s0, s0, s13
 800750c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007510:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007514:	4770      	bx	lr
 8007516:	ee30 0a47 	vsub.f32	s0, s0, s14
 800751a:	2101      	movs	r1, #1
 800751c:	2300      	movs	r3, #0
 800751e:	e7e6      	b.n	80074ee <arm_sin_f32+0x4e>
 8007520:	3e22f983 	.word	0x3e22f983
 8007524:	44000000 	.word	0x44000000
 8007528:	080075e4 	.word	0x080075e4

0800752c <__libc_init_array>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4e0d      	ldr	r6, [pc, #52]	; (8007564 <__libc_init_array+0x38>)
 8007530:	4c0d      	ldr	r4, [pc, #52]	; (8007568 <__libc_init_array+0x3c>)
 8007532:	1ba4      	subs	r4, r4, r6
 8007534:	10a4      	asrs	r4, r4, #2
 8007536:	2500      	movs	r5, #0
 8007538:	42a5      	cmp	r5, r4
 800753a:	d109      	bne.n	8007550 <__libc_init_array+0x24>
 800753c:	4e0b      	ldr	r6, [pc, #44]	; (800756c <__libc_init_array+0x40>)
 800753e:	4c0c      	ldr	r4, [pc, #48]	; (8007570 <__libc_init_array+0x44>)
 8007540:	f000 f820 	bl	8007584 <_init>
 8007544:	1ba4      	subs	r4, r4, r6
 8007546:	10a4      	asrs	r4, r4, #2
 8007548:	2500      	movs	r5, #0
 800754a:	42a5      	cmp	r5, r4
 800754c:	d105      	bne.n	800755a <__libc_init_array+0x2e>
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007554:	4798      	blx	r3
 8007556:	3501      	adds	r5, #1
 8007558:	e7ee      	b.n	8007538 <__libc_init_array+0xc>
 800755a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800755e:	4798      	blx	r3
 8007560:	3501      	adds	r5, #1
 8007562:	e7f2      	b.n	800754a <__libc_init_array+0x1e>
 8007564:	08007df0 	.word	0x08007df0
 8007568:	08007df0 	.word	0x08007df0
 800756c:	08007df0 	.word	0x08007df0
 8007570:	08007df4 	.word	0x08007df4

08007574 <memset>:
 8007574:	4402      	add	r2, r0
 8007576:	4603      	mov	r3, r0
 8007578:	4293      	cmp	r3, r2
 800757a:	d100      	bne.n	800757e <memset+0xa>
 800757c:	4770      	bx	lr
 800757e:	f803 1b01 	strb.w	r1, [r3], #1
 8007582:	e7f9      	b.n	8007578 <memset+0x4>

08007584 <_init>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	bf00      	nop
 8007588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758a:	bc08      	pop	{r3}
 800758c:	469e      	mov	lr, r3
 800758e:	4770      	bx	lr

08007590 <_fini>:
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007592:	bf00      	nop
 8007594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007596:	bc08      	pop	{r3}
 8007598:	469e      	mov	lr, r3
 800759a:	4770      	bx	lr
